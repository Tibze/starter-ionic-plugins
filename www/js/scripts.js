"use strict";angular.module("ionicPluginPlayground",["ionic","ngCordova","ngCordovaOauth"]).run(["$rootScope","$ionicPlatform","$cordovaStatusbar","$ionicLoading","$cordovaToast","$cordovaNetwork",function(o,e,t,n,a,i){o.platformReady=!1,o.networkAvailable=!0,o.networkType=null,o.isWebView=ionic.Platform.isWebView(),ionic.Platform.ready(function(){console.log("device ready"),o.platformReady=!0,o.isWebView&&(t.style(0),t.show(),i.isOnline()?o.networkAvailable=!0:o.networkAvailable=!1,o.networkType=i.getNetwork(),o.$on("$cordovaNetwork:online",function(e,t){o.networkAvailable=!0,o.networkType=t}),o.$on("$cordovaNetwork:offline",function(e,t){o.networkAvailable=!1,o.networkType=t}))},!1),o.showLoading=function(e){o.loading=n.show({content:e?e:"Loading",animation:"fade-in",showBackdrop:!0,maxWidth:200,showDelay:0})},o.hideLoading=function(){n.hide()}}]).config(["$httpProvider","$stateProvider","$urlRouterProvider","$ionicConfigProvider",function(o,e,t,n){n.backButton.text("Retour").icon("ion-chevron-left"),n.spinner.icon("spiral"),e.state("app",{url:"/app","abstract":!0,templateUrl:"templates/main.html",controller:"MainController"}).state("app.home",{url:"/home",cache:!0,views:{viewContent:{templateUrl:"templates/views/home.html",controller:"HomeController"}}}).state("app.actionSheet",{url:"/actionsheet",cache:!0,views:{viewContent:{templateUrl:"templates/views/action-sheet.html",controller:"ActionSheetController"}}}).state("app.oauth",{url:"/oauth",cache:!0,views:{viewContent:{templateUrl:"templates/views/oauth.html",controller:"OauthController"}}}).state("app.facebookConnect",{url:"/facebookConnect",cache:!0,views:{viewContent:{templateUrl:"templates/views/facebook-connect.html",controller:"FacebookConnectController"}}}).state("app.settings",{url:"/settings",cache:!0,views:{viewContent:{templateUrl:"templates/views/settings.html",controller:"SettingsController"}}}).state("app.alert",{url:"/alert",cache:!0,views:{viewContent:{templateUrl:"templates/views/alert.html",controller:"AlertController"}}}).state("app.emailComposer",{url:"/emailComposer",cache:!0,views:{viewContent:{templateUrl:"templates/views/email-composer.html",controller:"EmailComposerController"}}}).state("app.toast",{url:"/toast",cache:!0,views:{viewContent:{templateUrl:"templates/views/toast.html",controller:"ToastController"}}}).state("app.progressIndicator",{url:"/toast",cache:!0,views:{viewContent:{templateUrl:"templates/views/progress-indicator.html",controller:"ProgressIndicatorController"}}}).state("app.splashscreen",{url:"/toast",cache:!0,views:{viewContent:{templateUrl:"templates/views/splashscreen.html",controller:"SplashscreenController"}}}).state("app.platform",{url:"/platform",cache:!0,views:{viewContent:{templateUrl:"templates/views/platform.html",controller:"PlatformController"}}}).state("app.globalization",{url:"/globalization",cache:!0,views:{viewContent:{templateUrl:"templates/views/globalization.html",controller:"GlobalizationController"}}}).state("app.network",{url:"/network",cache:!0,views:{viewContent:{templateUrl:"templates/views/network.html",controller:"NetworkController"}}}).state("app.version",{url:"/version",cache:!0,views:{viewContent:{templateUrl:"templates/views/version.html",controller:"VersionController"}}}).state("app.share",{url:"/share",cache:!0,views:{viewContent:{templateUrl:"templates/views/social.html",controller:"SocialController"}}}).state("app.appAvailability",{url:"/appAvailability",cache:!0,views:{viewContent:{templateUrl:"templates/views/app-availability.html",controller:"AppAvailabilityController"}}}),t.otherwise("/app/home")}]),angular.module("ionicPluginPlayground").constant("API_ENDPOINT",{host:"http://localhost",port:3e3,path:"",needsAuth:!1}),angular.module("ionicPluginPlayground").controller("OauthController",["$scope","$cordovaOauth",function(o,e){o.OauthFacebook=function(){e.facebook("536037899877836",["email"]).then(function(o){console.log(o)},function(o){})}}]),angular.module("ionicPluginPlayground").controller("ActionSheetController",["$scope","$cordovaActionSheet",function(o,e){o.showActionSheet=function(){var o={title:"What do you want with this image?",buttonLabels:["Share via Facebook","Share via Twitter"],addCancelButtonWithLabel:"Cancel",androidEnableCancelButton:!0,winphoneEnableCancelButton:!0,addDestructiveButtonWithLabel:"Delete it"};e.show(o).then(function(o){})}}]),angular.module("ionicPluginPlayground").controller("AlertController",["$scope","$cordovaDialogs","Async","$timeout",function(o,e,t,n){o.alert=function(){e.alert("message","title","button name").then(function(){})},o.confirm=function(){e.confirm("message","title",["button 1","button 2"]).then(function(o){})},o.prompt=function(){e.prompt("msg","title",["btn 1","btn 2"],"default text").then(function(o){o.input1,o.buttonIndex})},o.beep=function(){e.beep(3)}}]),angular.module("ionicPluginPlayground").controller("AppAvailabilityController",["$scope","$rootScope","$cordovaAppAvailability",function(o,e,t){function n(){console.log("initialize"),o.isReady=!0,a()}function a(){console.log("checkAvailability");for(var e in o.availabilityData){if(ionic.Platform.isAndroid())var n=o.availabilityData[e].androidSchemes;if(ionic.Platform.isIOS())var n=o.availabilityData[e].iosSchemes;!function(e){t.check(n).then(function(t){console.log("available"),o.availabilityData[e].available=!0},function(){console.log("not available"),o.availabilityData[e].available=!1})}(e)}}o.isReady=!1,o.availabilityData=[{applicationName:"Facebook",iosSchemes:"fb://",androidSchemes:"com.facebook.katana",available:null},{applicationName:"Twitter",iosSchemes:"twitter://",androidSchemes:"com.twitter.android",available:null},{applicationName:"Whats App",iosSchemes:"whatsapp://",androidSchemes:"com.whatsapp",available:null},{applicationName:"YouTube",iosSchemes:"youtube://",androidSchemes:"com.youtube",available:null},{applicationName:"Waze",iosSchemes:"waze://",androidSchemes:"com.waze",available:null},{applicationName:"Instagram",iosSchemes:"instagram://",androidSchemes:"com.instagram",available:null}],e.$watch("platformReady",function(){console.log(e.platformReady),e.platformReady?(e.hideLoading(),n()):e.showLoading()})}]),angular.module("ionicPluginPlayground").controller("EmailComposerController",["$scope","$cordovaEmailComposer","$cordovaDialogs",function(o,e,t){var n={to:"max@mustermann.de",cc:"erika@mustermann.de",bcc:["john@doe.com","jane@doe.com"],attachments:[],subject:"Cordova Icons",body:"How are you? Nice greetings from Leipzig",isHtml:!0};o.emailComposer=function(){e.open(n).then(null,function(){})},o.checkEmailComposer=function(){e.isAvailable().then(function(){t.alert("Email Composer est disponible","Email Composer","Fermer")},function(){t.alert("Email Composer n'est pas disponible","Email Composer","Fermer")})}}]),angular.module("ionicPluginPlayground").controller("FacebookConnectController",["$scope","$rootScope","$cordovaFacebook",function(o,e,t){function n(){o.isReady=!0,a()}function a(){t.getLoginStatus().then(function(e){l=e.authResponse.userID,r=e.authResponse.accessToken,console.log(r),l&&(o.isConnected=!0,i())},function(e){o.isConnected=!1})}function i(){t.api("me",["public_profile"]).then(function(e){console.log(e.name),o.name=e.name,o.fbId=e.id},function(o){})}o.isReady=!1,o.isConnected=!1;var l=null,r=null;e.$watch("platformReady",function(){console.log(e.platformReady),e.platformReady?(e.hideLoading(),n()):e.showLoading()}),o.connectFacebook=function(){t.login(["public_profile","email"]).then(function(o){a()},function(o){a()})},o.logOutFacebook=function(){t.logout().then(function(e){o.isConnected=!1},function(o){alert("Impossible de se deconnecter de Facebook")})}}]),angular.module("ionicPluginPlayground").controller("GlobalizationController",["$rootScope","$scope","$cordovaGlobalization",function(o,e,t){function n(){e.isReady=!0,a()}function a(){t.getPreferredLanguage().then(function(o){e.preferredLanguage=o.value},function(o){}),t.getLocaleName().then(function(o){e.localeName=o.value},function(o){}),t.getFirstDayOfWeek().then(function(o){e.firstDayOfWeek=o.value},function(o){})}e.isReady=!1,e.preferredLanguage=null,e.localeName=null,e.firstDayOfWeek=null,o.$watch("platformReady",function(){console.log(o.platformReady),o.platformReady?(o.hideLoading(),n()):o.showLoading()})}]),angular.module("ionicPluginPlayground").controller("HomeController",["$scope","$rootScope","$timeout","API","$cordovaToast",function(o,e,t,n,a){function i(){o.isReady=!0,o.fetchRandomText()}o.isReady=!1,e.$watch("platformReady",function(){console.log(e.platformReady),e.platformReady?(e.hideLoading(),i()):e.showLoading()}),o.fetchRandomText=function(){n.doAsync().then(n.getHomeData).then(function(e){o.myHTML=e.data[0].description,o.$broadcast("scroll.refreshComplete")},function(e){o.myHTML="Unable to fetch API...",o.$broadcast("scroll.refreshComplete")})}}]),angular.module("ionicPluginPlayground").controller("MainController",["$scope",function(o){}]),angular.module("ionicPluginPlayground").controller("NetworkController",["$rootScope","$scope",function(o,e){}]),angular.module("ionicPluginPlayground").controller("PlatformController",["$scope",function(o){ionic.Platform.ready(function(){var e=(ionic.Platform.device(),ionic.Platform.isWebView()),t=ionic.Platform.isIPad(),n=ionic.Platform.isIOS(),a=ionic.Platform.isAndroid(),i=(ionic.Platform.isWindowsPhone(),ionic.Platform.platform()),l=ionic.Platform.version();e?o.webView="Yes":o.webView="No",t?o.isIpad="Yes":o.isIpad="No",n?o.isIOS="Yes":o.isIOS="No",a?o.isAndroid="Yes":o.isAndroid="No",o.currentPlatform=i,o.currentPlatformVersion=l,o.$$phase||o.$apply()})}]),angular.module("ionicPluginPlayground").controller("ProgressIndicatorController",["$scope","$cordovaProgress","$timeout",function(o,e,t){o.showSimple=function(){e.showSimple(!0),t(function(){e.hide()},3e3)},o.showSimpleWithLabel=function(){e.showSimpleWithLabel(!0,"Loading"),t(function(){e.hide()},3e3)},o.showSimpleWithLabelDetail=function(){e.showSimpleWithLabelDetail(!0,"Loading","detail"),t(function(){e.hide()},3e3)},o.showDeterminate=function(){e.showDeterminate(!1,1e5)},o.showBar=function(){e.showBar(!0,5e4)},o.showBarWithLabel=function(){e.showBarWithLabel(!1,1e5,"Loading")},o.showSuccess=function(){e.showSuccess(!0,"Success!"),t(function(){e.hide()},3e3)}}]),angular.module("ionicPluginPlayground").controller("SettingsController",["$scope",function(o){}]),angular.module("ionicPluginPlayground").controller("SocialController",["$scope","$rootScope","$cordovaSocialSharing","$cordovaToast","API",function(o,e,t,n,a){function i(){o.isReady=!0,l()}function l(){t.canShareVia("facebook",r,u,s).then(function(e){console.log(e),o.facebookShareAvailable=!0},function(e){o.facebookShareAvailable=!1}),t.canShareVia("twitter",r,u,s).then(function(e){o.twitterShareAvailable=!0},function(e){o.twitterShareAvailable=!1}),t.canShareViaEmail().then(function(e){o.emailShareAvailable=!0},function(e){o.emailShareAvailable=!1})}o.isReady=!1,o.facebookShareAvailable=null,o.twitterShareAvailable=null,o.emailShareAvailable=null;var r="Sample Message",c="Sample Subject",s="http://www.sample.com",u="http://www.sample.com/1.png";e.$watch("platformReady",function(){console.log(e.platformReady),e.platformReady?(e.hideLoading(),i()):e.showLoading()}),o.shareFacebook=function(){t.shareViaFacebook(r,u,s).then(function(o){},function(o){n.showShortTop("Share Facebook Canceled")})},o.shareTwitter=function(){t.shareViaTwitter(r,u,s).then(function(o){},function(o){n.showShortTop("Share Twitter Canceled")})},o.shareEmail=function(){t.shareViaEmail(r,c).then(function(o){},function(o){n.showShortTop("Share Email Canceled")})}}]),angular.module("ionicPluginPlayground").controller("SplashscreenController",["$scope","$cordovaSplashscreen","$timeout",function(o,e,t){o.showSplashscreen=function(){e.show(),t(function(){e.hide()},5e3)}}]),angular.module("ionicPluginPlayground").controller("ToastController",["$scope","$cordovaToast",function(o,e){o.showShortTop=function(){e.showShortTop("Here is a message").then(function(o){},function(o){})},o.showShortCenter=function(){e.showShortCenter("Here is a message").then(function(o){},function(o){})},o.showShortBottom=function(){e.showShortBottom("Here is a message").then(function(o){},function(o){})},o.showLongTop=function(){e.showLongTop("Here is a message").then(function(o){},function(o){})},o.showLongCenter=function(){e.showLongCenter("Here is a message").then(function(o){},function(o){})},o.showLongBottom=function(){e.showLongBottom("Here is a message").then(function(o){},function(o){})}}]),angular.module("ionicPluginPlayground").controller("VersionController",["$rootScope","$scope","$cordovaAppVersion",function(o,e,t){t.getVersionNumber().then(function(o){e.applicationVersion=o})}]),angular.module("ionicPluginPlayground").factory("API",["$http","$timeout","$q",function(o,e,t){var n=42,a=function(){var o=t.defer();return e(o.resolve.bind(null,n),1e3),o.promise},i=function(){return o({url:"http://www.json-generator.com/api/json/get/bYNWdCVCUO?indent=2",method:"GET"}).success(function(o){}).error(function(o){})};return{doAsync:a,getHomeData:i}}]),angular.module("ionicPluginPlayground").factory("ApiService",["$window","$http","API_ENDPOINT",function(o,e,t){var n=t,a=n.port?n.host+":"+n.port+n.path:n.host+n.path;return n.needsAuth&&(e.defaults.headers.common.Authorization="Basic "+o.btoa(n.username+":"+n.password)),{getEndpoint:function(){return a}}}]),angular.module("ionicPluginPlayground").factory("Async",["$http","$timeout","$q",function(o,e,t){var n=42,a=function(){var o=t.defer();return e(o.resolve.bind(null,n),6e3),o.promise};return{ask:a}}]),angular.module("ionicPluginPlayground").factory("ExampleService",["$http","$timeout","$q",function(o,e,t){var n=42,a=function(){var o=t.defer();return e(o.resolve.bind(null,n),1e3),o.promise},i=function(){return o({url:"http://beta.json-generator.com/api/json/get/Vywoj7mh",method:"GET"}).success(function(o){console.log("fetched this stuff from server:",o)}).error(function(o){console.log("an error occured",o)})};return{doSomethingAsync:a,fetchSomethingFromServer:i}}]),angular.module("ionicPluginPlayground").factory("_",["$window",function(o){return o._}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbmZpZy9hcGlFbmRwb2ludC5qcyIsImNvbnRyb2xsZXJzL09hdXRoQ29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL2FjdGlvblNoZWV0Q29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL2FsZXJ0Q29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL2FwcEF2YWlsYWJpbGl0eUNvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9lbWFpbENvbXBvc2VyQ29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL2ZhY2Vib29rQ29ubmVjdENvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9nbG9iYWxpemF0aW9uQ29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL2hvbWVDb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvbWFpbkNvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9uZXR3b3JrQ29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL3BsYXRmb3JtQ29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL3Byb2dyZXNzSW5kaWNhdG9yQ29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL3NldHRpbmdzQ29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL3NvY2lhbENvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9zcGxhc2hzY3JlZW5Db250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvdG9hc3RDb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvdmVyc2lvbkNvbnRyb2xsZXIuanMiLCJzZXJ2aWNlcy9BUEkuanMiLCJzZXJ2aWNlcy9BcGlTZXJ2aWNlLmpzIiwic2VydmljZXMvQXN5bmMuanMiLCJzZXJ2aWNlcy9FeGFtcGxlU2VydmljZS5qcyIsInV0aWxzL2xvZGFzaC5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwicnVuIiwiJHJvb3RTY29wZSIsIiRpb25pY1BsYXRmb3JtIiwiJGNvcmRvdmFTdGF0dXNiYXIiLCIkaW9uaWNMb2FkaW5nIiwiJGNvcmRvdmFUb2FzdCIsIiRjb3Jkb3ZhTmV0d29yayIsInBsYXRmb3JtUmVhZHkiLCJuZXR3b3JrQXZhaWxhYmxlIiwibmV0d29ya1R5cGUiLCJpc1dlYlZpZXciLCJpb25pYyIsIlBsYXRmb3JtIiwicmVhZHkiLCJjb25zb2xlIiwibG9nIiwic3R5bGUiLCJzaG93IiwiaXNPbmxpbmUiLCJnZXROZXR3b3JrIiwiJG9uIiwiZXZlbnQiLCJuZXR3b3JrU3RhdGUiLCJzaG93TG9hZGluZyIsInRleHQiLCJsb2FkaW5nIiwiY29udGVudCIsImFuaW1hdGlvbiIsInNob3dCYWNrZHJvcCIsIm1heFdpZHRoIiwic2hvd0RlbGF5IiwiaGlkZUxvYWRpbmciLCJoaWRlIiwiY29uZmlnIiwiJGh0dHBQcm92aWRlciIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGlvbmljQ29uZmlnUHJvdmlkZXIiLCJiYWNrQnV0dG9uIiwiaWNvbiIsInNwaW5uZXIiLCJzdGF0ZSIsInVybCIsImFic3RyYWN0IiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiY2FjaGUiLCJ2aWV3cyIsInZpZXdDb250ZW50Iiwib3RoZXJ3aXNlIiwiY29uc3RhbnQiLCJob3N0IiwicG9ydCIsInBhdGgiLCJuZWVkc0F1dGgiLCIkc2NvcGUiLCIkY29yZG92YU9hdXRoIiwiT2F1dGhGYWNlYm9vayIsImZhY2Vib29rIiwidGhlbiIsInJlc3VsdCIsImVycm9yIiwiJGNvcmRvdmFBY3Rpb25TaGVldCIsInNob3dBY3Rpb25TaGVldCIsIm9wdGlvbnMiLCJ0aXRsZSIsImJ1dHRvbkxhYmVscyIsImFkZENhbmNlbEJ1dHRvbldpdGhMYWJlbCIsImFuZHJvaWRFbmFibGVDYW5jZWxCdXR0b24iLCJ3aW5waG9uZUVuYWJsZUNhbmNlbEJ1dHRvbiIsImFkZERlc3RydWN0aXZlQnV0dG9uV2l0aExhYmVsIiwiYnRuSW5kZXgiLCIkY29yZG92YURpYWxvZ3MiLCJBc3luYyIsIiR0aW1lb3V0IiwiYWxlcnQiLCJjb25maXJtIiwiYnV0dG9uSW5kZXgiLCJwcm9tcHQiLCJpbnB1dDEiLCJiZWVwIiwiJGNvcmRvdmFBcHBBdmFpbGFiaWxpdHkiLCJpbml0aWFsaXplIiwiaXNSZWFkeSIsImNoZWNrQXZhaWxhYmlsaXR5IiwiaSIsImF2YWlsYWJpbGl0eURhdGEiLCJpc0FuZHJvaWQiLCJzY2hlbWUiLCJhbmRyb2lkU2NoZW1lcyIsImlzSU9TIiwiaW9zU2NoZW1lcyIsImNoZWNrIiwiaWQiLCJhdmFpbGFibGUiLCJhcHBsaWNhdGlvbk5hbWUiLCIkd2F0Y2giLCIkY29yZG92YUVtYWlsQ29tcG9zZXIiLCJlbWFpbCIsInRvIiwiY2MiLCJiY2MiLCJhdHRhY2htZW50cyIsInN1YmplY3QiLCJib2R5IiwiaXNIdG1sIiwiZW1haWxDb21wb3NlciIsIm9wZW4iLCJjaGVja0VtYWlsQ29tcG9zZXIiLCJpc0F2YWlsYWJsZSIsIiRjb3Jkb3ZhRmFjZWJvb2siLCJnZXRMb2dpblN0YXR1cyIsInN1Y2Nlc3MiLCJ1c2VySUQiLCJhdXRoUmVzcG9uc2UiLCJhY2Nlc1Rva2VuIiwiYWNjZXNzVG9rZW4iLCJpc0Nvbm5lY3RlZCIsImdldE1lIiwiYXBpIiwibmFtZSIsImZiSWQiLCJjb25uZWN0RmFjZWJvb2siLCJsb2dpbiIsImxvZ091dEZhY2Vib29rIiwibG9nb3V0IiwiJGNvcmRvdmFHbG9iYWxpemF0aW9uIiwiZ2V0R2xvYmFsaXphdGlvbkluZm9ybWF0aW9ucyIsImdldFByZWZlcnJlZExhbmd1YWdlIiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJ2YWx1ZSIsImdldExvY2FsZU5hbWUiLCJsb2NhbGVOYW1lIiwiZ2V0Rmlyc3REYXlPZldlZWsiLCJmaXJzdERheU9mV2VlayIsIkFQSSIsImZldGNoUmFuZG9tVGV4dCIsImRvQXN5bmMiLCJnZXRIb21lRGF0YSIsInJlc3BvbnNlIiwibXlIVE1MIiwiZGF0YSIsImRlc2NyaXB0aW9uIiwiJGJyb2FkY2FzdCIsImRldmljZSIsImlzSVBhZCIsImN1cnJlbnRQbGF0Zm9ybSIsImlzV2luZG93c1Bob25lIiwicGxhdGZvcm0iLCJjdXJyZW50UGxhdGZvcm1WZXJzaW9uIiwidmVyc2lvbiIsIndlYlZpZXciLCJpc0lwYWQiLCIkJHBoYXNlIiwiJGFwcGx5IiwiJGNvcmRvdmFQcm9ncmVzcyIsInNob3dTaW1wbGUiLCJzaG93U2ltcGxlV2l0aExhYmVsIiwic2hvd1NpbXBsZVdpdGhMYWJlbERldGFpbCIsInNob3dEZXRlcm1pbmF0ZSIsInNob3dCYXIiLCJzaG93QmFyV2l0aExhYmVsIiwic2hvd1N1Y2Nlc3MiLCIkY29yZG92YVNvY2lhbFNoYXJpbmciLCJnZXRQZXJtaXNzaW9ucyIsImNhblNoYXJlVmlhIiwibWVzc2FnZSIsImltYWdlIiwibGluayIsImZhY2Vib29rU2hhcmVBdmFpbGFibGUiLCJ0d2l0dGVyU2hhcmVBdmFpbGFibGUiLCJlcnIiLCJjYW5TaGFyZVZpYUVtYWlsIiwiZW1haWxTaGFyZUF2YWlsYWJsZSIsInNoYXJlRmFjZWJvb2siLCJzaGFyZVZpYUZhY2Vib29rIiwic2hvd1Nob3J0VG9wIiwic2hhcmVUd2l0dGVyIiwic2hhcmVWaWFUd2l0dGVyIiwic2hhcmVFbWFpbCIsInNoYXJlVmlhRW1haWwiLCIkY29yZG92YVNwbGFzaHNjcmVlbiIsInNob3dTcGxhc2hzY3JlZW4iLCJzaG93U2hvcnRDZW50ZXIiLCJzaG93U2hvcnRCb3R0b20iLCJzaG93TG9uZ1RvcCIsInNob3dMb25nQ2VudGVyIiwic2hvd0xvbmdCb3R0b20iLCIkY29yZG92YUFwcFZlcnNpb24iLCJnZXRWZXJzaW9uTnVtYmVyIiwiYXBwbGljYXRpb25WZXJzaW9uIiwiZmFjdG9yeSIsIiRodHRwIiwiJHEiLCJraW5kT2ZQcml2YXRlVmFyaWFibGUiLCJkZWZlcnJlZCIsImRlZmVyIiwicmVzb2x2ZSIsImJpbmQiLCJwcm9taXNlIiwibWV0aG9kIiwiJHdpbmRvdyIsIkFQSV9FTkRQT0lOVCIsIl9hcGkiLCJlbmRwb2ludCIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImdldEVuZHBvaW50IiwiYXNrIiwiZG9Tb21ldGhpbmdBc3luYyIsImZldGNoU29tZXRoaW5nRnJvbVNlcnZlciIsIl8iXSwibWFwcGluZ3MiOiJBQUFBLFlBWUFBLFNBQVFDLE9BQU8seUJBQTBCLFFBQVMsWUFBWSxtQkFFM0RDLEtBQUEsYUFBQSxpQkFBQSxvQkFBQSxnQkFBQSxnQkFBQSxrQkFBSSxTQUFTQyxFQUFXQyxFQUFlQyxFQUFrQkMsRUFBY0MsRUFBY0MsR0FFcEZMLEVBQVdNLGVBQWdCLEVBQzNCTixFQUFXTyxrQkFBbUIsRUFDOUJQLEVBQVdRLFlBQWMsS0FDekJSLEVBQVdTLFVBQVlDLE1BQU1DLFNBQVNGLFlBRXRDQyxNQUFNQyxTQUFTQyxNQUFNLFdBRW5CQyxRQUFRQyxJQUFJLGdCQUVaZCxFQUFXTSxlQUFnQixFQUV2Qk4sRUFBV1MsWUFHYlAsRUFBa0JhLE1BQU0sR0FDeEJiLEVBQWtCYyxPQUlkWCxFQUFnQlksV0FBWWpCLEVBQVdPLGtCQUFtQixFQUN6RFAsRUFBV08sa0JBQW1CLEVBRW5DUCxFQUFXUSxZQUFjSCxFQUFnQmEsYUFFekNsQixFQUFXbUIsSUFBSSx5QkFBMEIsU0FBU0MsRUFBT0MsR0FFdkRyQixFQUFXTyxrQkFBbUIsRUFDOUJQLEVBQVdRLFlBQWNhLElBSTNCckIsRUFBV21CLElBQUksMEJBQTJCLFNBQVNDLEVBQU9DLEdBRXhEckIsRUFBV08sa0JBQW1CLEVBQzlCUCxFQUFXUSxZQUFjYSxPQU01QixHQTBCSHJCLEVBQVdzQixZQUFjLFNBQVVDLEdBQy9CdkIsRUFBV3dCLFFBQVVyQixFQUFjYSxNQUMvQlMsUUFBU0YsRUFBT0EsRUFBTyxVQUN2QkcsVUFBVyxVQUNYQyxjQUFjLEVBQ2RDLFNBQVUsSUFDVkMsVUFBVyxLQUluQjdCLEVBQVc4QixZQUFjLFdBQ3JCM0IsRUFBYzRCLFdBS25CQyxRQUFBLGdCQUFBLGlCQUFBLHFCQUFBLHVCQUFPLFNBQVNDLEVBQWVDLEVBQWdCQyxFQUFvQkMsR0FHbEVB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QVNFLFFBQVFDLEtBQUssS0FBTUosR0FBd0IsS0FDdERDLEVBQVNJLFFBSWxCLFFBQ0VjLElBQUtBLE1DZFh2TixRQUFRQyxPQUFPLHlCQUVaZ00sUUFBUSxrQkFBQSxRQUFBLFdBQUEsS0FBa0IsU0FBU0MsRUFBT3RILEVBQVV1SCxHQUVuRCxHQUFJQyxHQUF3QixHQUV4Qm9CLEVBQW1CLFdBQ3JCLEdBQUluQixHQUFXRixFQUFHRyxPQUVsQixPQURBMUgsR0FBU3lILEVBQVNFLFFBQVFDLEtBQUssS0FBTUosR0FBd0IsS0FDdERDLEVBQVNJLFNBR2RnQixFQUEyQixXQUM3QixNQUFPdkIsSUFDSHRKLElBQUssdURBSUw4SixPQUFRLFFBRVR4RixRQUFRLFNBQVM2QixHQUNoQi9ILFFBQVFDLElBQUksa0NBQW1DOEgsS0FFaERoRixNQUFNLFNBQVNBLEdBQ2QvQyxRQUFRQyxJQUFJLG1CQUFvQjhDLEtBS3RDLFFBQ0V5SixpQkFBa0JBLEVBQ2xCQyx5QkFBMEJBLE1DNUJoQ3pOLFFBQVFDLE9BQU8seUJBQ1pnTSxRQUFRLEtBQUEsVUFBSyxTQUFTVSxHQUNyQixNQUFPQSxHQUFRZSIsImZpbGUiOiJzY3JpcHRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBuZ2RvYyBvdmVydmlld1xuICogQG5hbWUgSW9uaWNQbGF5Z3JvdW5kXG4gKiBAZGVzY3JpcHRpb25cbiAqICMgSW5pdGlhbGl6ZXMgbWFpbiBhcHBsaWNhdGlvbiBhbmQgcm91dGluZ1xuICpcbiAqIE1haW4gbW9kdWxlIG9mIHRoZSBhcHBsaWNhdGlvbi5cbiAqL1xuXG4gXG5hbmd1bGFyLm1vZHVsZSgnaW9uaWNQbHVnaW5QbGF5Z3JvdW5kJywgWydpb25pYycsICduZ0NvcmRvdmEnLCduZ0NvcmRvdmFPYXV0aCddKVxuXG4gIC5ydW4oZnVuY3Rpb24oJHJvb3RTY29wZSwkaW9uaWNQbGF0Zm9ybSwkY29yZG92YVN0YXR1c2JhciwkaW9uaWNMb2FkaW5nLCRjb3Jkb3ZhVG9hc3QsJGNvcmRvdmFOZXR3b3JrKSB7XG5cbiAgICAkcm9vdFNjb3BlLnBsYXRmb3JtUmVhZHkgPSBmYWxzZTtcbiAgICAkcm9vdFNjb3BlLm5ldHdvcmtBdmFpbGFibGUgPSB0cnVlO1xuICAgICRyb290U2NvcGUubmV0d29ya1R5cGUgPSBudWxsOyAgIFxuICAgICRyb290U2NvcGUuaXNXZWJWaWV3ID0gaW9uaWMuUGxhdGZvcm0uaXNXZWJWaWV3KCk7IFxuXG4gICAgaW9uaWMuUGxhdGZvcm0ucmVhZHkoZnVuY3Rpb24oKXtcblxuICAgICAgY29uc29sZS5sb2coXCJkZXZpY2UgcmVhZHlcIik7XG5cbiAgICAgICRyb290U2NvcGUucGxhdGZvcm1SZWFkeSA9IHRydWU7XG5cbiAgICAgIGlmICgkcm9vdFNjb3BlLmlzV2ViVmlldykge1xuXG4gICAgICAgIC8vIFN0YXR1cyBCYXJcbiAgICAgICAgJGNvcmRvdmFTdGF0dXNiYXIuc3R5bGUoMCk7XG4gICAgICAgICRjb3Jkb3ZhU3RhdHVzYmFyLnNob3coKTtcblxuICAgICAgICAvLyBOZXR3b3JrXG5cbiAgICAgICAgaWYgKCRjb3Jkb3ZhTmV0d29yay5pc09ubGluZSgpKSAkcm9vdFNjb3BlLm5ldHdvcmtBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICBlbHNlICRyb290U2NvcGUubmV0d29ya0F2YWlsYWJsZSA9IGZhbHNlO1xuXG4gICAgICAgICRyb290U2NvcGUubmV0d29ya1R5cGUgPSAkY29yZG92YU5ldHdvcmsuZ2V0TmV0d29yaygpO1xuXG4gICAgICAgICRyb290U2NvcGUuJG9uKCckY29yZG92YU5ldHdvcms6b25saW5lJywgZnVuY3Rpb24oZXZlbnQsIG5ldHdvcmtTdGF0ZSl7XG5cbiAgICAgICAgICAkcm9vdFNjb3BlLm5ldHdvcmtBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgICRyb290U2NvcGUubmV0d29ya1R5cGUgPSBuZXR3b3JrU3RhdGU7XG5cbiAgICAgICAgfSk7IFxuXG4gICAgICAgICRyb290U2NvcGUuJG9uKCckY29yZG92YU5ldHdvcms6b2ZmbGluZScsIGZ1bmN0aW9uKGV2ZW50LCBuZXR3b3JrU3RhdGUpe1xuXG4gICAgICAgICAgJHJvb3RTY29wZS5uZXR3b3JrQXZhaWxhYmxlID0gZmFsc2U7XG4gICAgICAgICAgJHJvb3RTY29wZS5uZXR3b3JrVHlwZSA9IG5ldHdvcmtTdGF0ZTtcblxuICAgICAgICB9KTsgXG5cbiAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgfSwgZmFsc2UpO1xuXG4gICAgLy8gJGlvbmljUGxhdGZvcm0ucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgLy8gICAvLyBzYXZlIHRvIHVzZSBwbHVnaW5zIGhlcmVcblxuICAgIC8vICAgJHJvb3RTY29wZS5wbGF0Zm9ybVJlYWR5ID0gdHJ1ZTtcbiAgICAvLyAgICRjb3Jkb3ZhU3RhdHVzYmFyLnN0eWxlKDApO1xuICAgIC8vICAgJGNvcmRvdmFTdGF0dXNiYXIuc2hvdygpO1xuXG4gICAgLy8gICAkcm9vdFNjb3BlLiRvbignJGNvcmRvdmFOZXR3b3JrOm9ubGluZScsIGZ1bmN0aW9uKGV2ZW50LCBuZXR3b3JrU3RhdGUpe1xuICAgIC8vICAgICAvL3ZhciBvbmxpbmVTdGF0ZSA9IG5ldHdvcmtTdGF0ZTtcbiAgICAvLyAgICAgY29uc29sZS5sb2coXCJvbmxpbmVcIik7XG4gICAgLy8gICB9KTtcblxuICAgIC8vICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgZnVuY3Rpb24oKXtcbiAgICAvLyAgICAgY29uc29sZS5sb2coXCJvZmZsaW5lXCIpO1xuICAgIC8vICAgfSwgdHJ1ZSk7XG5cbiAgICAvLyAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgZnVuY3Rpb24oKXtcbiAgICAvLyAgICAgY29uc29sZS5sb2coXCJvbmxpbmVcIik7XG4gICAgLy8gICB9LCBmYWxzZSk7ICAgICAgICAgICAgICAgICAgIFxuXG4gICAgLy8gfSk7XG5cbiAgICAvLyBhZGQgcG9zc2libGUgZ2xvYmFsIGV2ZW50IGhhbmRsZXJzIGhlcmVcblxuICAgICRyb290U2NvcGUuc2hvd0xvYWRpbmcgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICAkcm9vdFNjb3BlLmxvYWRpbmcgPSAkaW9uaWNMb2FkaW5nLnNob3coe1xuICAgICAgICAgICAgY29udGVudDogdGV4dCA/IHRleHQgOiAnTG9hZGluZycsXG4gICAgICAgICAgICBhbmltYXRpb246ICdmYWRlLWluJyxcbiAgICAgICAgICAgIHNob3dCYWNrZHJvcDogdHJ1ZSxcbiAgICAgICAgICAgIG1heFdpZHRoOiAyMDAsXG4gICAgICAgICAgICBzaG93RGVsYXk6IDBcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICRyb290U2NvcGUuaGlkZUxvYWRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgIH07ICAgIFxuXG4gIH0pXG5cbiAgLmNvbmZpZyhmdW5jdGlvbigkaHR0cFByb3ZpZGVyLCAkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyLCAkaW9uaWNDb25maWdQcm92aWRlcikge1xuICAgIFxuICAgIC8vIENvbmZpZ1xuICAgICRpb25pY0NvbmZpZ1Byb3ZpZGVyLmJhY2tCdXR0b24udGV4dCgnUmV0b3VyJykuaWNvbignaW9uLWNoZXZyb24tbGVmdCcpO1xuICAgICRpb25pY0NvbmZpZ1Byb3ZpZGVyLnNwaW5uZXIuaWNvbihcInNwaXJhbFwiKTtcblxuICAgIC8vIHJlZ2lzdGVyICRodHRwIGludGVyY2VwdG9ycywgaWYgYW55LiBlLmcuXG4gICAgLy8gJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnaW50ZXJjZXB0b3ItbmFtZScpO1xuXG4gICAgLy8gQXBwbGljYXRpb24gcm91dGluZ1xuICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAuc3RhdGUoJ2FwcCcsIHtcbiAgICAgICAgdXJsOiAnL2FwcCcsXG4gICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy9tYWluLmh0bWwnLFxuICAgICAgICBjb250cm9sbGVyOiAnTWFpbkNvbnRyb2xsZXInXG4gICAgICB9KVxuICAgICAgLnN0YXRlKCdhcHAuaG9tZScsIHtcbiAgICAgICAgdXJsOiAnL2hvbWUnLFxuICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAndmlld0NvbnRlbnQnOiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy92aWV3cy9ob21lLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0hvbWVDb250cm9sbGVyJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnYXBwLmFjdGlvblNoZWV0Jywge1xuICAgICAgICB1cmw6ICcvYWN0aW9uc2hlZXQnLFxuICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAndmlld0NvbnRlbnQnOiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy92aWV3cy9hY3Rpb24tc2hlZXQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQWN0aW9uU2hlZXRDb250cm9sbGVyJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkgXG5cbiAgICAgIC5zdGF0ZSgnYXBwLm9hdXRoJywge1xuICAgICAgICB1cmw6ICcvb2F1dGgnLFxuICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAndmlld0NvbnRlbnQnOiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy92aWV3cy9vYXV0aC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdPYXV0aENvbnRyb2xsZXInXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICAuc3RhdGUoJ2FwcC5mYWNlYm9va0Nvbm5lY3QnLCB7XG4gICAgICAgIHVybDogJy9mYWNlYm9va0Nvbm5lY3QnLFxuICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAndmlld0NvbnRlbnQnOiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy92aWV3cy9mYWNlYm9vay1jb25uZWN0Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0ZhY2Vib29rQ29ubmVjdENvbnRyb2xsZXInXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KSAgICAgIFxuICAgICAgLnN0YXRlKCdhcHAuc2V0dGluZ3MnLCB7XG4gICAgICAgIHVybDogJy9zZXR0aW5ncycsXG4gICAgICAgIGNhY2hlOiB0cnVlLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICd2aWV3Q29udGVudCc6IHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3ZpZXdzL3NldHRpbmdzLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1NldHRpbmdzQ29udHJvbGxlcidcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuc3RhdGUoJ2FwcC5hbGVydCcsIHtcbiAgICAgICAgdXJsOiAnL2FsZXJ0JyxcbiAgICAgICAgY2FjaGU6IHRydWUsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ3ZpZXdDb250ZW50Jzoge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvdmlld3MvYWxlcnQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQWxlcnRDb250cm9sbGVyJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnYXBwLmVtYWlsQ29tcG9zZXInLCB7XG4gICAgICAgIHVybDogJy9lbWFpbENvbXBvc2VyJyxcbiAgICAgICAgY2FjaGU6IHRydWUsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ3ZpZXdDb250ZW50Jzoge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvdmlld3MvZW1haWwtY29tcG9zZXIuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnRW1haWxDb21wb3NlckNvbnRyb2xsZXInXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLnN0YXRlKCdhcHAudG9hc3QnLCB7XG4gICAgICAgIHVybDogJy90b2FzdCcsXG4gICAgICAgIGNhY2hlOiB0cnVlLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICd2aWV3Q29udGVudCc6IHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3ZpZXdzL3RvYXN0Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1RvYXN0Q29udHJvbGxlcidcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuc3RhdGUoJ2FwcC5wcm9ncmVzc0luZGljYXRvcicsIHtcbiAgICAgICAgdXJsOiAnL3RvYXN0JyxcbiAgICAgICAgY2FjaGU6IHRydWUsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ3ZpZXdDb250ZW50Jzoge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvdmlld3MvcHJvZ3Jlc3MtaW5kaWNhdG9yLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1Byb2dyZXNzSW5kaWNhdG9yQ29udHJvbGxlcidcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuc3RhdGUoJ2FwcC5zcGxhc2hzY3JlZW4nLCB7XG4gICAgICAgIHVybDogJy90b2FzdCcsXG4gICAgICAgIGNhY2hlOiB0cnVlLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICd2aWV3Q29udGVudCc6IHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3ZpZXdzL3NwbGFzaHNjcmVlbi5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTcGxhc2hzY3JlZW5Db250cm9sbGVyJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnYXBwLnBsYXRmb3JtJywge1xuICAgICAgICB1cmw6ICcvcGxhdGZvcm0nLFxuICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAndmlld0NvbnRlbnQnOiB7IFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvdmlld3MvcGxhdGZvcm0uaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUGxhdGZvcm1Db250cm9sbGVyJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnYXBwLmdsb2JhbGl6YXRpb24nLCB7XG4gICAgICAgIHVybDogJy9nbG9iYWxpemF0aW9uJyxcbiAgICAgICAgY2FjaGU6IHRydWUsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgJ3ZpZXdDb250ZW50Jzoge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvdmlld3MvZ2xvYmFsaXphdGlvbi5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdHbG9iYWxpemF0aW9uQ29udHJvbGxlcidcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pICAgICAgXG4gICAgICAuc3RhdGUoJ2FwcC5uZXR3b3JrJywge1xuICAgICAgICB1cmw6ICcvbmV0d29yaycsXG4gICAgICAgIGNhY2hlOiB0cnVlLFxuICAgICAgICB2aWV3czoge1xuICAgICAgICAgICd2aWV3Q29udGVudCc6IHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGVzL3ZpZXdzL25ldHdvcmsuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTmV0d29ya0NvbnRyb2xsZXInXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLnN0YXRlKCdhcHAudmVyc2lvbicsIHtcbiAgICAgICAgdXJsOiAnL3ZlcnNpb24nLFxuICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAndmlld0NvbnRlbnQnOiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy92aWV3cy92ZXJzaW9uLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1ZlcnNpb25Db250cm9sbGVyJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5zdGF0ZSgnYXBwLnNoYXJlJywge1xuICAgICAgICB1cmw6ICcvc2hhcmUnLFxuICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAndmlld0NvbnRlbnQnOiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy92aWV3cy9zb2NpYWwuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnU29jaWFsQ29udHJvbGxlcidcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuc3RhdGUoJ2FwcC5hcHBBdmFpbGFiaWxpdHknLCB7XG4gICAgICAgIHVybDogJy9hcHBBdmFpbGFiaWxpdHknLFxuICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAndmlld0NvbnRlbnQnOiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy92aWV3cy9hcHAtYXZhaWxhYmlsaXR5Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0FwcEF2YWlsYWJpbGl0eUNvbnRyb2xsZXInXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG5cbiAgICAvLyByZWRpcmVjdHMgdG8gZGVmYXVsdCByb3V0ZSBmb3IgdW5kZWZpbmVkIHJvdXRlc1xuICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9hcHAvaG9tZScpO1xuICB9KTtcblxuXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIGNvbnN0YW50XG4gKiBAbmFtZSBJb25pY1BsYXlncm91bmQuQVBJX0VORFBPSU5UXG4gKiBAZGVzY3JpcHRpb25cbiAqICMgQVBJX0VORFBPSU5UXG4gKiBEZWZpbmVzIHRoZSBBUEkgZW5kcG9pbnQgd2hlcmUgb3VyIHJlc291cmNlcyB3aWxsIG1ha2UgcmVxdWVzdHMgYWdhaW5zdC5cbiAqIElzIHVzZWQgaW5zaWRlIC9zZXJ2aWNlcy9BcGlTZXJ2aWNlLmpzIHRvIGdlbmVyYXRlIGNvcnJlY3QgZW5kcG9pbnQgZHluYW1pY2FsbHlcbiAqL1xuXG5cbmFuZ3VsYXIubW9kdWxlKCdpb25pY1BsdWdpblBsYXlncm91bmQnKVxuXG4gIC8vIGRldmVsb3BtZW50XG4gIC5jb25zdGFudCgnQVBJX0VORFBPSU5UJywge1xuICAgIGhvc3Q6ICdodHRwOi8vbG9jYWxob3N0JyxcbiAgICBwb3J0OiAzMDAwLFxuICAgIHBhdGg6ICcnLFxuICAgIG5lZWRzQXV0aDogZmFsc2VcbiAgfSk7XG5cblxuICAvLyBsaXZlIGV4YW1wbGUgd2l0aCBIVFRQIEJhc2ljIEF1dGhcbiAgLypcbiAgLmNvbnN0YW50KCdBUElfRU5EUE9JTlQnLCB7XG4gICAgaG9zdDogJ2h0dHA6Ly95b3Vyc2VydmVyLmNvbScsXG4gICAgcGF0aDogJy9hcGkvdjInLFxuICAgIG5lZWRzQXV0aDogdHJ1ZSxcbiAgICB1c2VybmFtZTogJ3doYXRldmVyJyxcbiAgICBwYXNzd29yZDogJ2Zvb2JhcidcbiAgfSk7XG4gICovXG5cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIElvbmljUGxheWdyb3VuZC5jb250cm9sbGVyOlNldHRpbmdzQ29udHJvbGxlclxuICogQGRlc2NyaXB0aW9uXG4gKiAjIFNldHRpbmdzQ29udHJvbGxlclxuICovXG5hbmd1bGFyLm1vZHVsZSgnaW9uaWNQbHVnaW5QbGF5Z3JvdW5kJylcbiAgLmNvbnRyb2xsZXIoJ09hdXRoQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwkY29yZG92YU9hdXRoKSB7ICAgIFxuXG4gIFx0JHNjb3BlLk9hdXRoRmFjZWJvb2sgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICRjb3Jkb3ZhT2F1dGguZmFjZWJvb2soXCI1MzYwMzc4OTk4Nzc4MzZcIiwgW1wiZW1haWxcIl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgLy8gZXJyb3JcbiAgICAgICAgfSk7IFxuXG4gIFx0fTsgXHQgICAgIFxuXG4gIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgSW9uaWNQbGF5Z3JvdW5kLmNvbnRyb2xsZXI6U2V0dGluZ3NDb250cm9sbGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqICMgU2V0dGluZ3NDb250cm9sbGVyXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdpb25pY1BsdWdpblBsYXlncm91bmQnKVxuICAuY29udHJvbGxlcignQWN0aW9uU2hlZXRDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCRjb3Jkb3ZhQWN0aW9uU2hlZXQpIHsgICAgXG5cbiAgXHQkc2NvcGUuc2hvd0FjdGlvblNoZWV0ID0gZnVuY3Rpb24oKXtcblxuXHRcdHZhciBvcHRpb25zID0ge1xuXHRcdHRpdGxlOiAnV2hhdCBkbyB5b3Ugd2FudCB3aXRoIHRoaXMgaW1hZ2U/Jyxcblx0XHRidXR0b25MYWJlbHM6IFsnU2hhcmUgdmlhIEZhY2Vib29rJywgJ1NoYXJlIHZpYSBUd2l0dGVyJ10sXG5cdFx0YWRkQ2FuY2VsQnV0dG9uV2l0aExhYmVsOiAnQ2FuY2VsJyxcblx0XHRhbmRyb2lkRW5hYmxlQ2FuY2VsQnV0dG9uIDogdHJ1ZSxcblx0XHR3aW5waG9uZUVuYWJsZUNhbmNlbEJ1dHRvbiA6IHRydWUsXG5cdFx0YWRkRGVzdHJ1Y3RpdmVCdXR0b25XaXRoTGFiZWwgOiAnRGVsZXRlIGl0J1xuXHRcdH07XG5cblx0XHQkY29yZG92YUFjdGlvblNoZWV0LnNob3cob3B0aW9ucylcblx0XHQgIC50aGVuKGZ1bmN0aW9uKGJ0bkluZGV4KSB7XG5cdFx0ICAgIHZhciBpbmRleCA9IGJ0bkluZGV4O1xuXHRcdCAgfSk7XG5cbiAgXHR9OyBcdCAgICAgXG5cbiAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBJb25pY1BsYXlncm91bmQuY29udHJvbGxlcjpTZXR0aW5nc0NvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogIyBTZXR0aW5nc0NvbnRyb2xsZXJcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC5jb250cm9sbGVyKCdBbGVydENvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsJGNvcmRvdmFEaWFsb2dzLEFzeW5jLCR0aW1lb3V0KSB7XG5cbiAgICAvLyBkbyBzb21ldGhpbmcgd2l0aCAkc2NvcGVcbiAgICAkc2NvcGUuYWxlcnQgPSBmdW5jdGlvbigpe1xuXG5cdCAkY29yZG92YURpYWxvZ3MuYWxlcnQoJ21lc3NhZ2UnLCAndGl0bGUnLCAnYnV0dG9uIG5hbWUnKVxuXHQgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG5cdCAgICAgIC8vIGNhbGxiYWNrIHN1Y2Nlc3Ncblx0ICAgIH0pO1xuXG4gICAgfTtcblxuICAgICRzY29wZS5jb25maXJtID0gZnVuY3Rpb24oKXtcblxuXHRcdCRjb3Jkb3ZhRGlhbG9ncy5jb25maXJtKCdtZXNzYWdlJywgJ3RpdGxlJywgWydidXR0b24gMScsJ2J1dHRvbiAyJ10pXG5cdFx0ICAgIC50aGVuKGZ1bmN0aW9uKGJ1dHRvbkluZGV4KSB7XG5cdFx0ICAgICAgLy8gbm8gYnV0dG9uID0gMCwgJ09LJyA9IDEsICdDYW5jZWwnID0gMlxuXHRcdCAgICAgIHZhciBidG5JbmRleCA9IGJ1dHRvbkluZGV4O1xuXHRcdCAgICB9KTtcblxuICAgIH07XG5cbiAgICAkc2NvcGUucHJvbXB0ID0gZnVuY3Rpb24oKXtcblxuXHRcdCAkY29yZG92YURpYWxvZ3MucHJvbXB0KCdtc2cnLCAndGl0bGUnLCBbJ2J0biAxJywnYnRuIDInXSwgJ2RlZmF1bHQgdGV4dCcpXG5cdFx0ICAgIC50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuXHRcdCAgICAgIHZhciBpbnB1dCA9IHJlc3VsdC5pbnB1dDE7XG5cdFx0ICAgICAgLy8gbm8gYnV0dG9uID0gMCwgJ09LJyA9IDEsICdDYW5jZWwnID0gMlxuXHRcdCAgICAgIHZhciBidG5JbmRleCA9IHJlc3VsdC5idXR0b25JbmRleDtcblx0XHQgICAgfSk7XG5cbiAgICB9OyBcblxuICAgICRzY29wZS5iZWVwID0gZnVuY3Rpb24oKXtcblxuICAgIFx0JGNvcmRvdmFEaWFsb2dzLmJlZXAoMyk7IFxuXG4gICAgfTsgICAgICAgXG5cbiAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBJb25pY1BsYXlncm91bmQuY29udHJvbGxlcjpTZXR0aW5nc0NvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogIyBTZXR0aW5nc0NvbnRyb2xsZXJcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC5jb250cm9sbGVyKCdBcHBBdmFpbGFiaWxpdHlDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCRyb290U2NvcGUsJGNvcmRvdmFBcHBBdmFpbGFiaWxpdHkpIHsgICBcblxuICAgICRzY29wZS5pc1JlYWR5ID0gZmFsc2U7XG5cbiAgICAkc2NvcGUuYXZhaWxhYmlsaXR5RGF0YSA9IFtcbiAgICBcdHtcbiAgICBcdFx0J2FwcGxpY2F0aW9uTmFtZSc6J0ZhY2Vib29rJyxcbiAgICBcdFx0J2lvc1NjaGVtZXMnOidmYjovLycsXG4gICAgXHRcdCdhbmRyb2lkU2NoZW1lcyc6J2NvbS5mYWNlYm9vay5rYXRhbmEnLFxuICAgIFx0XHQnYXZhaWxhYmxlJzpudWxsXG4gICAgXHR9LFxuICAgIFx0e1xuICAgIFx0XHQnYXBwbGljYXRpb25OYW1lJzonVHdpdHRlcicsXG4gICAgXHRcdCdpb3NTY2hlbWVzJzondHdpdHRlcjovLycsXG4gICAgXHRcdCdhbmRyb2lkU2NoZW1lcyc6J2NvbS50d2l0dGVyLmFuZHJvaWQnLFxuICAgIFx0XHQnYXZhaWxhYmxlJzpudWxsXG4gICAgXHR9LFxuICAgIFx0e1xuICAgIFx0XHQnYXBwbGljYXRpb25OYW1lJzonV2hhdHMgQXBwJyxcbiAgICBcdFx0J2lvc1NjaGVtZXMnOid3aGF0c2FwcDovLycsXG4gICAgXHRcdCdhbmRyb2lkU2NoZW1lcyc6J2NvbS53aGF0c2FwcCcsXG4gICAgXHRcdCdhdmFpbGFibGUnOm51bGxcbiAgICBcdH0sXG4gICAgXHR7XG4gICAgXHRcdCdhcHBsaWNhdGlvbk5hbWUnOidZb3VUdWJlJyxcbiAgICBcdFx0J2lvc1NjaGVtZXMnOid5b3V0dWJlOi8vJyxcbiAgICBcdFx0J2FuZHJvaWRTY2hlbWVzJzonY29tLnlvdXR1YmUnLFxuICAgIFx0XHQnYXZhaWxhYmxlJzpudWxsXG4gICAgXHR9LFxuICAgIFx0e1xuICAgIFx0XHQnYXBwbGljYXRpb25OYW1lJzonV2F6ZScsXG4gICAgXHRcdCdpb3NTY2hlbWVzJzond2F6ZTovLycsXG4gICAgXHRcdCdhbmRyb2lkU2NoZW1lcyc6J2NvbS53YXplJyxcbiAgICBcdFx0J2F2YWlsYWJsZSc6bnVsbFxuICAgIFx0fSxcbiAgICBcdHtcbiAgICBcdFx0J2FwcGxpY2F0aW9uTmFtZSc6J0luc3RhZ3JhbScsXG4gICAgXHRcdCdpb3NTY2hlbWVzJzonaW5zdGFncmFtOi8vJyxcbiAgICBcdFx0J2FuZHJvaWRTY2hlbWVzJzonY29tLmluc3RhZ3JhbScsXG4gICAgXHRcdCdhdmFpbGFibGUnOm51bGxcbiAgICBcdH0gICAgXHQgICAgXHQgICBcdCAgICBcdCAgIFx0ICAgIFx0XG4gICAgXTtcblxuICAgIC8vaWYgKCRyb290U2NvcGUucGxhdGZvcm1SZWFkeSkgaW5pdGlhbGl6ZSgpO1xuXG4gICAgJHJvb3RTY29wZS4kd2F0Y2goJ3BsYXRmb3JtUmVhZHknLCBmdW5jdGlvbigpIHtcbiAgICAgICBjb25zb2xlLmxvZygkcm9vdFNjb3BlLnBsYXRmb3JtUmVhZHkpO1xuICAgICAgIGlmICghJHJvb3RTY29wZS5wbGF0Zm9ybVJlYWR5KSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLnNob3dMb2FkaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuaGlkZUxvYWRpbmcoKTtcbiAgICAgICAgICAgIC8vIEVudHJ5IFBvaW50XG4gICAgICAgICAgICBpbml0aWFsaXplKCk7ICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9KTsgIFxuXG4gIFx0ZnVuY3Rpb24gaW5pdGlhbGl6ZSgpe1xuXG4gICAgXHRjb25zb2xlLmxvZyhcImluaXRpYWxpemVcIik7XG5cbiAgICBcdCRzY29wZS5pc1JlYWR5ID0gdHJ1ZTtcbiAgICBcdGNoZWNrQXZhaWxhYmlsaXR5KCk7XG5cblx0fTtcblxuXHRmdW5jdGlvbiBjaGVja0F2YWlsYWJpbGl0eSgpe1xuXG4gICAgXHRjb25zb2xlLmxvZyhcImNoZWNrQXZhaWxhYmlsaXR5XCIpO1xuXG4gICAgXHRmb3IgKHZhciBpIGluICRzY29wZS5hdmFpbGFiaWxpdHlEYXRhKSB7XG5cbiAgICBcdFx0aWYgKGlvbmljLlBsYXRmb3JtLmlzQW5kcm9pZCgpKSB2YXIgc2NoZW1lID0gJHNjb3BlLmF2YWlsYWJpbGl0eURhdGFbaV0uYW5kcm9pZFNjaGVtZXM7XG4gICAgXHRcdGlmIChpb25pYy5QbGF0Zm9ybS5pc0lPUygpKSB2YXIgc2NoZW1lID0gJHNjb3BlLmF2YWlsYWJpbGl0eURhdGFbaV0uaW9zU2NoZW1lcztcblxuXHRcdCAgICAoZnVuY3Rpb24oaSkge1xuXG5cdFx0XHRcdCRjb3Jkb3ZhQXBwQXZhaWxhYmlsaXR5LmNoZWNrKHNjaGVtZSlcblx0XHRcdFx0ICAgICAgLnRoZW4oZnVuY3Rpb24oaWQpIHtcblx0XHRcdFx0ICAgICAgXHRjb25zb2xlLmxvZyhcImF2YWlsYWJsZVwiKTtcblx0XHRcdFx0ICAgICAgICAkc2NvcGUuYXZhaWxhYmlsaXR5RGF0YVtpXS5hdmFpbGFibGUgPSB0cnVlO1xuXHRcdFx0XHQgICAgICB9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdCAgICAgIFx0Y29uc29sZS5sb2coXCJub3QgYXZhaWxhYmxlXCIpO1xuXHRcdFx0XHQgICAgICAgICRzY29wZS5hdmFpbGFiaWxpdHlEYXRhW2ldLmF2YWlsYWJsZSA9IGZhbHNlO1xuXHRcdFx0XHQgICAgICB9KTtcblxuXHRcdCAgICB9KShpKTtcblxuICAgIFx0fVxuXG5cdH07XHQgICAgXG5cbiAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBJb25pY1BsYXlncm91bmQuY29udHJvbGxlcjpTZXR0aW5nc0NvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogIyBTZXR0aW5nc0NvbnRyb2xsZXJcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC5jb250cm9sbGVyKCdFbWFpbENvbXBvc2VyQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwkY29yZG92YUVtYWlsQ29tcG9zZXIsJGNvcmRvdmFEaWFsb2dzKSB7XG5cblx0dmFyIGVtYWlsID0ge1xuXHRcdHRvOiAnbWF4QG11c3Rlcm1hbm4uZGUnLFxuXHRcdGNjOiAnZXJpa2FAbXVzdGVybWFubi5kZScsXG5cdFx0YmNjOiBbJ2pvaG5AZG9lLmNvbScsICdqYW5lQGRvZS5jb20nXSxcblx0XHRhdHRhY2htZW50czogW10sXG5cdFx0c3ViamVjdDogJ0NvcmRvdmEgSWNvbnMnLFxuXHRcdGJvZHk6ICdIb3cgYXJlIHlvdT8gTmljZSBncmVldGluZ3MgZnJvbSBMZWlwemlnJyxcblx0XHRpc0h0bWw6IHRydWVcblx0fTsgIFx0XG5cbiAgICAvLyBkbyBzb21ldGhpbmcgd2l0aCAkc2NvcGVcbiAgICAkc2NvcGUuZW1haWxDb21wb3NlciA9IGZ1bmN0aW9uKCl7XG5cblx0XHQkY29yZG92YUVtYWlsQ29tcG9zZXIub3BlbihlbWFpbCkudGhlbihudWxsLCBmdW5jdGlvbiAoKSB7XG5cdFx0ICAgLy8gdXNlciBjYW5jZWxsZWQgZW1haWxcblx0XHQgfSk7XG5cbiAgICB9OyBcblxuICAgICRzY29wZS5jaGVja0VtYWlsQ29tcG9zZXIgPSBmdW5jdGlvbigpe1xuXG5cdFx0JGNvcmRvdmFFbWFpbENvbXBvc2VyLmlzQXZhaWxhYmxlKCkudGhlbihmdW5jdGlvbigpIHtcblx0XHQgICAkY29yZG92YURpYWxvZ3MuYWxlcnQoJ0VtYWlsIENvbXBvc2VyIGVzdCBkaXNwb25pYmxlJywgJ0VtYWlsIENvbXBvc2VyJywgJ0Zlcm1lcicpO1xuXHRcdCB9LCBmdW5jdGlvbiAoKSB7XG5cdFx0ICAgJGNvcmRvdmFEaWFsb2dzLmFsZXJ0KCdFbWFpbCBDb21wb3NlciBuXFwnZXN0IHBhcyBkaXNwb25pYmxlJywgJ0VtYWlsIENvbXBvc2VyJywgJ0Zlcm1lcicpO1xuXHRcdCB9KTtcblxuICAgIH07ICAgICAgICAgXG5cbiAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBJb25pY1BsYXlncm91bmQuY29udHJvbGxlcjpTZXR0aW5nc0NvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogIyBTZXR0aW5nc0NvbnRyb2xsZXJcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC5jb250cm9sbGVyKCdGYWNlYm9va0Nvbm5lY3RDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCRyb290U2NvcGUsJGNvcmRvdmFGYWNlYm9vaykgeyAgIFxuXG4gICAgJHNjb3BlLmlzUmVhZHkgPSBmYWxzZTsgIFxuICAgICRzY29wZS5pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuXG4gICAgdmFyIHVzZXJJRCA9IG51bGw7XG4gICAgdmFyIGFjY2VzVG9rZW4gPSBudWxsO1xuXG4gICAgJHJvb3RTY29wZS4kd2F0Y2goJ3BsYXRmb3JtUmVhZHknLCBmdW5jdGlvbigpIHtcbiAgICAgICBjb25zb2xlLmxvZygkcm9vdFNjb3BlLnBsYXRmb3JtUmVhZHkpO1xuICAgICAgIGlmICghJHJvb3RTY29wZS5wbGF0Zm9ybVJlYWR5KSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLnNob3dMb2FkaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuaGlkZUxvYWRpbmcoKTtcbiAgICAgICAgICAgIC8vIEVudHJ5IFBvaW50XG4gICAgICAgICAgICBpbml0aWFsaXplKCk7ICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9KTsgICBcblxuICBcdGZ1bmN0aW9uIGluaXRpYWxpemUoKXtcblxuICAgIFx0JHNjb3BlLmlzUmVhZHkgPSB0cnVlOyAgXG4gICAgXHRnZXRMb2dpblN0YXR1cygpOyAgXG5cblx0fTtcblxuXHRmdW5jdGlvbiBnZXRMb2dpblN0YXR1cygpe1xuXG5cdFx0ICRjb3Jkb3ZhRmFjZWJvb2suZ2V0TG9naW5TdGF0dXMoKVxuXHRcdCAgICAudGhlbihmdW5jdGlvbihzdWNjZXNzKSB7XG5cblx0XHQgICAgXHR1c2VySUQgPSBzdWNjZXNzLmF1dGhSZXNwb25zZS51c2VySUQ7XG5cdFx0ICAgIFx0YWNjZXNUb2tlbiA9IHN1Y2Nlc3MuYXV0aFJlc3BvbnNlLmFjY2Vzc1Rva2VuO1xuXG5cdFx0ICAgIFx0Y29uc29sZS5sb2coYWNjZXNUb2tlbik7XG5cblx0XHQgICAgXHRpZiAodXNlcklEKSB7XG5cdFx0ICAgIFx0XHQkc2NvcGUuaXNDb25uZWN0ZWQgPSB0cnVlO1xuXHRcdCAgICBcdFx0Z2V0TWUoKTtcblx0XHQgICAgXHRcdC8vZ2V0UGljdHVyZSgpO1xuXHQgICAgXHRcdH0gXG5cblxuXG5cdFx0ICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuXHRcdCAgICAgIFxuXHRcdCAgICBcdCRzY29wZS5pc0Nvbm5lY3RlZCA9IGZhbHNlOyBcblxuXHRcdCAgICB9KTtcblxuXHR9O1xuXG5cdGZ1bmN0aW9uIGdldE1lKCl7XG5cblx0XHQkY29yZG92YUZhY2Vib29rLmFwaShcIm1lXCIsIFtcInB1YmxpY19wcm9maWxlXCJdKVxuXHRcdCAgICAudGhlbihmdW5jdGlvbihzdWNjZXNzKSB7XG5cdFx0ICAgICAgY29uc29sZS5sb2coc3VjY2Vzcy5uYW1lKTtcblxuXHRcdCAgICAgICRzY29wZS5uYW1lID0gc3VjY2Vzcy5uYW1lO1xuXHRcdCAgICAgICRzY29wZS5mYklkID0gc3VjY2Vzcy5pZDtcblxuXHRcdCAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHQgICAgICAvLyBlcnJvclxuXHRcdCAgICB9KTtcblxuXHR9O1xuXG5cdGZ1bmN0aW9uIGdldFBpY3R1cmUoKXtcblxuXHRcdCRjb3Jkb3ZhRmFjZWJvb2suYXBpKHVzZXJJRCtcIi9waWN0dXJlXCIpXG5cdFx0ICAgIC50aGVuKGZ1bmN0aW9uKHN1Y2Nlc3MpIHtcblx0XHQgICAgICBjb25zb2xlLmxvZyhzdWNjZXNzLnVybCk7XG5cdFx0ICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuXHRcdCAgICAgIC8vIGVycm9yXG5cdFx0ICAgIH0pO1xuXG5cdH07XHRcblxuXHQgICRzY29wZS5jb25uZWN0RmFjZWJvb2sgPSBmdW5jdGlvbigpe1xuXG5cdFx0JGNvcmRvdmFGYWNlYm9vay5sb2dpbihbXCJwdWJsaWNfcHJvZmlsZVwiLCBcImVtYWlsXCJdKVxuXHRcdCAgICAudGhlbihmdW5jdGlvbihzdWNjZXNzKSB7XG5cdFx0ICAgICAgZ2V0TG9naW5TdGF0dXMoKTtcblx0XHQgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG5cdFx0ICAgICAgZ2V0TG9naW5TdGF0dXMoKTtcblx0XHQgICAgfSk7XG5cblx0ICB9O1xuXG5cdCAgJHNjb3BlLmxvZ091dEZhY2Vib29rID0gZnVuY3Rpb24oKXtcblxuXHRcdCRjb3Jkb3ZhRmFjZWJvb2subG9nb3V0KClcblx0XHQgICAgLnRoZW4oZnVuY3Rpb24oc3VjY2Vzcykge1xuXHRcdCAgICBcdCRzY29wZS5pc0Nvbm5lY3RlZCA9IGZhbHNlOyBcblx0XHQgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG5cdFx0ICAgICAgYWxlcnQoXCJJbXBvc3NpYmxlIGRlIHNlIGRlY29ubmVjdGVyIGRlIEZhY2Vib29rXCIpO1xuXHRcdCAgICB9KTtcblxuXHQgIH07XHQgICAgXG5cbiAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBJb25pY1BsYXlncm91bmQuY29udHJvbGxlcjpTZXR0aW5nc0NvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogIyBTZXR0aW5nc0NvbnRyb2xsZXJcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC5jb250cm9sbGVyKCdHbG9iYWxpemF0aW9uQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRyb290U2NvcGUsJHNjb3BlLCRjb3Jkb3ZhR2xvYmFsaXphdGlvbikgeyBcblxuICAgICRzY29wZS5pc1JlYWR5ID0gZmFsc2U7XG4gICAgJHNjb3BlLnByZWZlcnJlZExhbmd1YWdlID0gbnVsbDtcbiAgICAkc2NvcGUubG9jYWxlTmFtZSA9IG51bGw7XG4gICAgJHNjb3BlLmZpcnN0RGF5T2ZXZWVrID0gbnVsbDtcblxuICAgICRyb290U2NvcGUuJHdhdGNoKCdwbGF0Zm9ybVJlYWR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgY29uc29sZS5sb2coJHJvb3RTY29wZS5wbGF0Zm9ybVJlYWR5KTtcbiAgICAgICBpZiAoISRyb290U2NvcGUucGxhdGZvcm1SZWFkeSkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS5zaG93TG9hZGluZygpO1xuICAgICAgICB9XG4gICAgICAgZWxzZSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLmhpZGVMb2FkaW5nKCk7XG4gICAgICAgICAgICAvLyBFbnRyeSBQb2ludFxuICAgICAgICAgICAgaW5pdGlhbGl6ZSgpOyAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplKCl7XG5cbiAgICAgICAgJHNjb3BlLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICBnZXRHbG9iYWxpemF0aW9uSW5mb3JtYXRpb25zKCk7ICAgICAgXG5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0R2xvYmFsaXphdGlvbkluZm9ybWF0aW9ucygpe1xuXG5cdCAgJGNvcmRvdmFHbG9iYWxpemF0aW9uLmdldFByZWZlcnJlZExhbmd1YWdlKCkudGhlbihcblx0ICAgIGZ1bmN0aW9uKHJlc3VsdCkge1xuXHQgICAgICAkc2NvcGUucHJlZmVycmVkTGFuZ3VhZ2UgPSByZXN1bHQudmFsdWU7XG5cdCAgICB9LFxuXHQgICAgZnVuY3Rpb24oZXJyb3IpIHtcblx0ICAgICAgLy8gZXJyb3Jcblx0ICB9KTtcblxuXHQgJGNvcmRvdmFHbG9iYWxpemF0aW9uLmdldExvY2FsZU5hbWUoKS50aGVuKFxuXHQgICAgZnVuY3Rpb24ocmVzdWx0KSB7XG5cdCAgICAgICRzY29wZS5sb2NhbGVOYW1lID0gcmVzdWx0LnZhbHVlO1xuXHQgICAgfSxcblx0ICAgIGZ1bmN0aW9uKGVycm9yKSB7XG5cdCAgICAgIC8vIGVycm9yXG5cdCAgfSk7XG5cblx0ICAkY29yZG92YUdsb2JhbGl6YXRpb24uZ2V0Rmlyc3REYXlPZldlZWsoKS50aGVuKFxuXHQgICAgZnVuY3Rpb24ocmVzdWx0KSB7XG5cdCAgICAgICRzY29wZS5maXJzdERheU9mV2VlayA9IHJlc3VsdC52YWx1ZTtcblx0ICAgIH0sXG5cdCAgICBmdW5jdGlvbihlcnJvcikge1xuXHQgICAgICAvLyBlcnJvclxuXHQgIH0pO1x0ICBcdCAgXG5cbiAgICB9OyAgICAgXHQgICAgIFxuXG4gIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgSW9uaWNQbGF5Z3JvdW5kLmNvbnRyb2xsZXI6SG9tZUNvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogIyBIb21lQ29udHJvbGxlclxuICovXG5hbmd1bGFyLm1vZHVsZSgnaW9uaWNQbHVnaW5QbGF5Z3JvdW5kJylcbiAgLmNvbnRyb2xsZXIoJ0hvbWVDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCRyb290U2NvcGUsJHRpbWVvdXQsIEFQSSwgJGNvcmRvdmFUb2FzdCkge1xuXG4gICAgJHNjb3BlLmlzUmVhZHkgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoKXtcbiAgICAgICAgJHNjb3BlLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICAkc2NvcGUuZmV0Y2hSYW5kb21UZXh0KCk7ICAgICAgICBcbiAgICB9O1xuXG4gICAgJHJvb3RTY29wZS4kd2F0Y2goJ3BsYXRmb3JtUmVhZHknLCBmdW5jdGlvbigpIHtcbiAgICAgICBjb25zb2xlLmxvZygkcm9vdFNjb3BlLnBsYXRmb3JtUmVhZHkpO1xuICAgICAgIGlmICghJHJvb3RTY29wZS5wbGF0Zm9ybVJlYWR5KSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLnNob3dMb2FkaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuaGlkZUxvYWRpbmcoKTtcbiAgICAgICAgICAgIC8vIEVudHJ5IFBvaW50XG4gICAgICAgICAgICBpbml0aWFsaXplKCk7ICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGp1c3QgYW4gZXhhbXBsZS4uLlxuICAgICRzY29wZS5mZXRjaFJhbmRvbVRleHQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgQVBJLmRvQXN5bmMoKVxuICAgICAgICAudGhlbihBUEkuZ2V0SG9tZURhdGEpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgICAgICRzY29wZS5teUhUTUwgPSByZXNwb25zZS5kYXRhWzBdLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgLy8gY2xvc2UgcHVsbCB0byByZWZyZXNoIGxvYWRlclxuICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3Njcm9sbC5yZWZyZXNoQ29tcGxldGUnKTtcbiAgICAgICAgfSxmdW5jdGlvbihlcnJvcil7XG5cbiAgICAgICAgICAgICRzY29wZS5teUhUTUwgPSBcIlVuYWJsZSB0byBmZXRjaCBBUEkuLi5cIjtcbiAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdzY3JvbGwucmVmcmVzaENvbXBsZXRlJyk7XG5cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIElvbmljUGxheWdyb3VuZC5jb250cm9sbGVyOk1haW5Db250cm9sbGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqICMgTWFpbkNvbnRyb2xsZXJcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC5jb250cm9sbGVyKCdNYWluQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuXG4gICAgLy8gZG8gc29tZXRoaW5nIHdpdGggJHNjb3BlXG5cbiAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBJb25pY1BsYXlncm91bmQuY29udHJvbGxlcjpTZXR0aW5nc0NvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogIyBTZXR0aW5nc0NvbnRyb2xsZXJcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC5jb250cm9sbGVyKCdOZXR3b3JrQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRyb290U2NvcGUsJHNjb3BlKSB7IFxuXG4gICAgLy8gJHNjb3BlLm5ldHdvcmtBdmFpbGFibGUgPSAkcm9vdFNjb3BlLm5ldHdvcmtBdmFpbGFibGU7XG5cbiAgICAvLyAkcm9vdFNjb3BlLiR3YXRjaCgnbmV0d29ya0F2YWlsYWJsZScsIGZ1bmN0aW9uKCkge1xuICAgIC8vICAgIGNvbnNvbGUubG9nKCRyb290U2NvcGUucGxhdGZvcm1SZWFkeSk7XG4gICAgLy8gICAgaWYgKCRyb290U2NvcGUubmV0d29ya0F2YWlsYWJsZSkge1xuICAgIC8vICAgICAgICAgJHNjb3BlLm5ldHdvcmtBdmFpbGFibGUgPSB0cnVlO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgZWxzZSB7XG4gICAgLy8gICAgICAgICAkc2NvcGUubmV0d29ya0F2YWlsYWJsZSA9IGZhbHNlOyAgICAgICAgICAgIFxuICAgIC8vICAgICB9XG4gICAgLy8gfSk7ICBcdCAgICAgXG5cbiAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBJb25pY1BsYXlncm91bmQuY29udHJvbGxlcjpTZXR0aW5nc0NvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogIyBTZXR0aW5nc0NvbnRyb2xsZXJcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC5jb250cm9sbGVyKCdQbGF0Zm9ybUNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcblxuXHQgIGlvbmljLlBsYXRmb3JtLnJlYWR5KGZ1bmN0aW9uKCl7XG5cdCAgICAvLyB3aWxsIGV4ZWN1dGUgd2hlbiBkZXZpY2UgaXMgcmVhZHksIG9yIGltbWVkaWF0ZWx5IGlmIHRoZSBkZXZpY2UgaXMgYWxyZWFkeSByZWFkeS5cblxuXHRcdCAgdmFyIGRldmljZUluZm9ybWF0aW9uID0gaW9uaWMuUGxhdGZvcm0uZGV2aWNlKCk7XG5cblx0XHQgIHZhciBpc1dlYlZpZXcgPSBpb25pYy5QbGF0Zm9ybS5pc1dlYlZpZXcoKTtcblx0XHQgIHZhciBpc0lQYWQgPSBpb25pYy5QbGF0Zm9ybS5pc0lQYWQoKTtcblx0XHQgIHZhciBpc0lPUyA9IGlvbmljLlBsYXRmb3JtLmlzSU9TKCk7XG5cdFx0ICB2YXIgaXNBbmRyb2lkID0gaW9uaWMuUGxhdGZvcm0uaXNBbmRyb2lkKCk7XG5cdFx0ICB2YXIgaXNXaW5kb3dzUGhvbmUgPSBpb25pYy5QbGF0Zm9ybS5pc1dpbmRvd3NQaG9uZSgpO1xuXG5cdFx0ICB2YXIgY3VycmVudFBsYXRmb3JtID0gaW9uaWMuUGxhdGZvcm0ucGxhdGZvcm0oKTtcblx0XHQgIHZhciBjdXJyZW50UGxhdGZvcm1WZXJzaW9uID0gaW9uaWMuUGxhdGZvcm0udmVyc2lvbigpO1xuXG5cdFx0ICBpZiAoaXNXZWJWaWV3KSAkc2NvcGUud2ViVmlldyA9IFwiWWVzXCI7XG5cdFx0ICBlbHNlICRzY29wZS53ZWJWaWV3ID0gXCJOb1wiO1xuXG5cdFx0ICBpZiAoaXNJUGFkKSAkc2NvcGUuaXNJcGFkID0gXCJZZXNcIjsgXG5cdFx0ICBlbHNlICRzY29wZS5pc0lwYWQgPSBcIk5vXCI7XG5cblx0XHQgIGlmIChpc0lPUykgJHNjb3BlLmlzSU9TID0gXCJZZXNcIjtcblx0XHQgIGVsc2UgJHNjb3BlLmlzSU9TID0gXCJOb1wiO1x0XG5cblx0XHQgIGlmIChpc0FuZHJvaWQpICRzY29wZS5pc0FuZHJvaWQgPSBcIlllc1wiO1xuXHRcdCAgZWxzZSAkc2NvcGUuaXNBbmRyb2lkID0gXCJOb1wiO1x0XG5cdFx0ICBcblx0XHQgICRzY29wZS5jdXJyZW50UGxhdGZvcm0gPSBjdXJyZW50UGxhdGZvcm07XG5cdFx0ICAkc2NvcGUuY3VycmVudFBsYXRmb3JtVmVyc2lvbiA9IGN1cnJlbnRQbGF0Zm9ybVZlcnNpb247XHQgIFx0ICBcdFx0ICBcblxuXHRcdCAgaWYoISRzY29wZS4kJHBoYXNlKSAkc2NvcGUuJGFwcGx5KCk7ICAgXG5cblx0ICB9KTsgICAgICAgXG5cbiAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBJb25pY1BsYXlncm91bmQuY29udHJvbGxlcjpTZXR0aW5nc0NvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogIyBTZXR0aW5nc0NvbnRyb2xsZXJcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC5jb250cm9sbGVyKCdQcm9ncmVzc0luZGljYXRvckNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsJGNvcmRvdmFQcm9ncmVzcywkdGltZW91dCkgeyAgICBcblxuICBcdCRzY29wZS5zaG93U2ltcGxlID0gZnVuY3Rpb24oKXtcblxuXHRcdCRjb3Jkb3ZhUHJvZ3Jlc3Muc2hvd1NpbXBsZSh0cnVlKTtcblx0XHQkdGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0JGNvcmRvdmFQcm9ncmVzcy5oaWRlKCk7XG5cdFx0fSwzMDAwKTtcbiAgXHR9OyBcblxuICBcdCRzY29wZS5zaG93U2ltcGxlV2l0aExhYmVsID0gZnVuY3Rpb24oKXtcblxuICBcdFx0JGNvcmRvdmFQcm9ncmVzcy5zaG93U2ltcGxlV2l0aExhYmVsKHRydWUsIFwiTG9hZGluZ1wiKTtcblx0XHQkdGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0JGNvcmRvdmFQcm9ncmVzcy5oaWRlKCk7XG5cdFx0fSwzMDAwKTsgIFx0XHRcblxuICBcdH07IFx0IFxuXG4gIFx0JHNjb3BlLnNob3dTaW1wbGVXaXRoTGFiZWxEZXRhaWwgPSBmdW5jdGlvbigpe1xuXG5cdFx0JGNvcmRvdmFQcm9ncmVzcy5zaG93U2ltcGxlV2l0aExhYmVsRGV0YWlsKHRydWUsIFwiTG9hZGluZ1wiLCBcImRldGFpbFwiKTtcblx0XHQkdGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0JGNvcmRvdmFQcm9ncmVzcy5oaWRlKCk7XG5cdFx0fSwzMDAwKTsgIFxuICBcdH07IFxuXG4gIFx0JHNjb3BlLnNob3dEZXRlcm1pbmF0ZSA9IGZ1bmN0aW9uKCl7XG5cbiAgXHRcdCRjb3Jkb3ZhUHJvZ3Jlc3Muc2hvd0RldGVybWluYXRlKGZhbHNlLCAxMDAwMDApO1xuXG4gIFx0fTsgICBcblxuICBcdCRzY29wZS5zaG93QmFyID0gZnVuY3Rpb24oKXtcblxuICBcdFx0JGNvcmRvdmFQcm9ncmVzcy5zaG93QmFyKHRydWUsIDUwMDAwKTtcblxuICBcdH07XG5cbiAgXHQkc2NvcGUuc2hvd0JhcldpdGhMYWJlbCA9IGZ1bmN0aW9uKCl7XG5cblx0XHQkY29yZG92YVByb2dyZXNzLnNob3dCYXJXaXRoTGFiZWwoZmFsc2UsIDEwMDAwMCwgXCJMb2FkaW5nXCIpO1xuXG4gIFx0fTtcblxuICBcdCRzY29wZS5zaG93U3VjY2VzcyA9IGZ1bmN0aW9uKCl7XG5cblx0XHQkY29yZG92YVByb2dyZXNzLnNob3dTdWNjZXNzKHRydWUsIFwiU3VjY2VzcyFcIik7XG5cdFx0JHRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdCRjb3Jkb3ZhUHJvZ3Jlc3MuaGlkZSgpO1xuXHRcdH0sMzAwMCk7IFx0XHRcblxuICBcdH07XG5cbiAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBJb25pY1BsYXlncm91bmQuY29udHJvbGxlcjpTZXR0aW5nc0NvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogIyBTZXR0aW5nc0NvbnRyb2xsZXJcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC5jb250cm9sbGVyKCdTZXR0aW5nc0NvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcblxuICAgIC8vIGRvIHNvbWV0aGluZyB3aXRoICRzY29wZVxuXG4gIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgSW9uaWNQbGF5Z3JvdW5kLmNvbnRyb2xsZXI6U2V0dGluZ3NDb250cm9sbGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqICMgU2V0dGluZ3NDb250cm9sbGVyXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdpb25pY1BsdWdpblBsYXlncm91bmQnKVxuICAuY29udHJvbGxlcignU29jaWFsQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwkcm9vdFNjb3BlLCRjb3Jkb3ZhU29jaWFsU2hhcmluZywkY29yZG92YVRvYXN0LEFQSSkge1xuXG4gICAgJHNjb3BlLmlzUmVhZHkgPSBmYWxzZTtcbiAgICAkc2NvcGUuZmFjZWJvb2tTaGFyZUF2YWlsYWJsZSA9IG51bGw7XG4gICAgJHNjb3BlLnR3aXR0ZXJTaGFyZUF2YWlsYWJsZSA9IG51bGw7XG4gICAgJHNjb3BlLmVtYWlsU2hhcmVBdmFpbGFibGUgPSBudWxsO1xuXG4gICAgdmFyIG1lc3NhZ2UgPSBcIlNhbXBsZSBNZXNzYWdlXCI7XG4gICAgdmFyIGZpbGUgPSBcIlNhbXBsZSBGaWxlXCI7XG4gICAgdmFyIHN1YmplY3QgPSBcIlNhbXBsZSBTdWJqZWN0XCI7XG4gICAgdmFyIGxpbmsgPSBcImh0dHA6Ly93d3cuc2FtcGxlLmNvbVwiO1xuICAgIHZhciBpbWFnZSA9IFwiaHR0cDovL3d3dy5zYW1wbGUuY29tLzEucG5nXCI7XG5cbiAgICAkcm9vdFNjb3BlLiR3YXRjaCgncGxhdGZvcm1SZWFkeScsIGZ1bmN0aW9uKCkge1xuICAgICAgIGNvbnNvbGUubG9nKCRyb290U2NvcGUucGxhdGZvcm1SZWFkeSk7XG4gICAgICAgaWYgKCEkcm9vdFNjb3BlLnBsYXRmb3JtUmVhZHkpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuc2hvd0xvYWRpbmcoKTtcbiAgICAgICAgfVxuICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgJHJvb3RTY29wZS5oaWRlTG9hZGluZygpO1xuICAgICAgICAgICAgLy8gRW50cnkgUG9pbnRcbiAgICAgICAgICAgIGluaXRpYWxpemUoKTsgICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLnNoYXJlRmFjZWJvb2sgPSBmdW5jdGlvbigpe1xuXG4gICAgICAkY29yZG92YVNvY2lhbFNoYXJpbmdcbiAgICAgIC5zaGFyZVZpYUZhY2Vib29rKG1lc3NhZ2UsIGltYWdlLCBsaW5rKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgLy8gU3VjY2VzcyFcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG5cbiAgICAgICAgICAkY29yZG92YVRvYXN0LnNob3dTaG9ydFRvcCgnU2hhcmUgRmFjZWJvb2sgQ2FuY2VsZWQnKTtcblxuICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgJHNjb3BlLnNoYXJlVHdpdHRlciA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICRjb3Jkb3ZhU29jaWFsU2hhcmluZ1xuICAgICAgICAuc2hhcmVWaWFUd2l0dGVyKG1lc3NhZ2UsIGltYWdlLCBsaW5rKVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAvLyBTdWNjZXNzIVxuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcblxuICAgICAgICAgICRjb3Jkb3ZhVG9hc3Quc2hvd1Nob3J0VG9wKCdTaGFyZSBUd2l0dGVyIENhbmNlbGVkJyk7XG5cbiAgICAgIH0pO1xuXG4gICAgfTsgXG5cbiAgICAkc2NvcGUuc2hhcmVFbWFpbCA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICRjb3Jkb3ZhU29jaWFsU2hhcmluZ1xuICAgICAgICAuc2hhcmVWaWFFbWFpbChtZXNzYWdlLCBzdWJqZWN0KVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAvLyBTdWNjZXNzIVxuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcblxuICAgICAgICAgICRjb3Jkb3ZhVG9hc3Quc2hvd1Nob3J0VG9wKCdTaGFyZSBFbWFpbCBDYW5jZWxlZCcpO1xuXG4gICAgICB9KTtcblxuICAgIH07ICAgICAgIFxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpe1xuXG4gICAgICAgICRzY29wZS5pc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgZ2V0UGVybWlzc2lvbnMoKTsgICAgICBcblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRQZXJtaXNzaW9ucygpe1xuXG4gICAgICAvL1NoYXJlIEZhY2Vib29rID9cbiAgICAgICRjb3Jkb3ZhU29jaWFsU2hhcmluZy5jYW5TaGFyZVZpYSgnZmFjZWJvb2snLCBtZXNzYWdlLCBpbWFnZSwgbGluaylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAkc2NvcGUuZmFjZWJvb2tTaGFyZUF2YWlsYWJsZSA9IHRydWU7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICRzY29wZS5mYWNlYm9va1NoYXJlQXZhaWxhYmxlID0gZmFsc2U7XG4gICAgICB9KTsgICAgIFxuXG4gICAgICAvLyBTaGFyZSBUd2l0dGVyID9cbiAgICAgICRjb3Jkb3ZhU29jaWFsU2hhcmluZy5jYW5TaGFyZVZpYSgndHdpdHRlcicsIG1lc3NhZ2UsIGltYWdlLCBsaW5rKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAkc2NvcGUudHdpdHRlclNoYXJlQXZhaWxhYmxlID0gdHJ1ZTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICRzY29wZS50d2l0dGVyU2hhcmVBdmFpbGFibGUgPSBmYWxzZTtcbiAgICAgIH0pOyBcblxuICAgICAgLy8gU2hhcmUgTWFpbCA/IFxuICAgICAgJGNvcmRvdmFTb2NpYWxTaGFyaW5nLmNhblNoYXJlVmlhRW1haWwoKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICRzY29wZS5lbWFpbFNoYXJlQXZhaWxhYmxlID0gdHJ1ZTtcbiAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAkc2NvcGUuZW1haWxTaGFyZUF2YWlsYWJsZSA9IGZhbHNlO1xuICAgICAgfSk7XG5cbiAgICB9O1xuXG5cbiAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBJb25pY1BsYXlncm91bmQuY29udHJvbGxlcjpTZXR0aW5nc0NvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogIyBTZXR0aW5nc0NvbnRyb2xsZXJcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC5jb250cm9sbGVyKCdTcGxhc2hzY3JlZW5Db250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCRjb3Jkb3ZhU3BsYXNoc2NyZWVuLCR0aW1lb3V0KSB7IFx0XG5cbiAgICAvLyBkbyBzb21ldGhpbmcgd2l0aCAkc2NvcGVcbiAgICAkc2NvcGUuc2hvd1NwbGFzaHNjcmVlbiA9IGZ1bmN0aW9uKCl7XG5cbiAgICBcdCRjb3Jkb3ZhU3BsYXNoc2NyZWVuLnNob3coKTtcbiAgICBcdCR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgXHRcdCRjb3Jkb3ZhU3BsYXNoc2NyZWVuLmhpZGUoKTtcbiAgICBcdH0sNTAwMCk7XG5cbiAgICB9OyAgICAgICAgXG5cbiAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBJb25pY1BsYXlncm91bmQuY29udHJvbGxlcjpTZXR0aW5nc0NvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogIyBTZXR0aW5nc0NvbnRyb2xsZXJcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC5jb250cm9sbGVyKCdUb2FzdENvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsJGNvcmRvdmFUb2FzdCkgeyAgICBcblxuICBcdCRzY29wZS5zaG93U2hvcnRUb3AgPSBmdW5jdGlvbigpe1xuXG5cdFx0JGNvcmRvdmFUb2FzdC5zaG93U2hvcnRUb3AoJ0hlcmUgaXMgYSBtZXNzYWdlJykudGhlbihmdW5jdGlvbihzdWNjZXNzKSB7XG5cdFx0ICAgIC8vIHN1Y2Nlc3Ncblx0XHQgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuXHRcdCAgICAvLyBlcnJvclxuXHRcdCAgfSk7XG5cbiAgXHR9O1xuXG4gIFx0JHNjb3BlLnNob3dTaG9ydENlbnRlciA9IGZ1bmN0aW9uKCl7XG5cblx0XHQkY29yZG92YVRvYXN0LnNob3dTaG9ydENlbnRlcignSGVyZSBpcyBhIG1lc3NhZ2UnKS50aGVuKGZ1bmN0aW9uKHN1Y2Nlc3MpIHtcblx0XHQgICAgLy8gc3VjY2Vzc1xuXHRcdCAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG5cdFx0ICAgIC8vIGVycm9yXG5cdFx0ICB9KTtcblxuICBcdH07XG5cbiAgXHQkc2NvcGUuc2hvd1Nob3J0Qm90dG9tID0gZnVuY3Rpb24oKXtcblxuXHRcdCRjb3Jkb3ZhVG9hc3Quc2hvd1Nob3J0Qm90dG9tKCdIZXJlIGlzIGEgbWVzc2FnZScpLnRoZW4oZnVuY3Rpb24oc3VjY2Vzcykge1xuXHRcdCAgICAvLyBzdWNjZXNzXG5cdFx0ICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHQgICAgLy8gZXJyb3Jcblx0XHQgIH0pO1xuXG4gIFx0fTtcblxuICBcdCRzY29wZS5zaG93TG9uZ1RvcCA9IGZ1bmN0aW9uKCl7XG5cblx0XHQkY29yZG92YVRvYXN0LnNob3dMb25nVG9wKCdIZXJlIGlzIGEgbWVzc2FnZScpLnRoZW4oZnVuY3Rpb24oc3VjY2Vzcykge1xuXHRcdCAgICAvLyBzdWNjZXNzXG5cdFx0ICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHQgICAgLy8gZXJyb3Jcblx0XHQgIH0pO1xuXG4gIFx0fTtcblxuXHQkc2NvcGUuc2hvd0xvbmdDZW50ZXIgPSBmdW5jdGlvbigpe1xuXG5cdFx0JGNvcmRvdmFUb2FzdC5zaG93TG9uZ0NlbnRlcignSGVyZSBpcyBhIG1lc3NhZ2UnKS50aGVuKGZ1bmN0aW9uKHN1Y2Nlc3MpIHtcblx0XHQgICAgLy8gc3VjY2Vzc1xuXHRcdCAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG5cdFx0ICAgIC8vIGVycm9yXG5cdFx0ICB9KTtcblxuXHR9O1xuXG5cdCRzY29wZS5zaG93TG9uZ0JvdHRvbSA9IGZ1bmN0aW9uKCl7XG5cblxuXHRcdCRjb3Jkb3ZhVG9hc3Quc2hvd0xvbmdCb3R0b20oJ0hlcmUgaXMgYSBtZXNzYWdlJykudGhlbihmdW5jdGlvbihzdWNjZXNzKSB7XG5cdFx0ICAgIC8vIHN1Y2Nlc3Ncblx0XHQgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuXHRcdCAgICAvLyBlcnJvclxuXHRcdCAgfSk7XG5cblx0fTsgIFx0ICAgICBcblxuICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIElvbmljUGxheWdyb3VuZC5jb250cm9sbGVyOlNldHRpbmdzQ29udHJvbGxlclxuICogQGRlc2NyaXB0aW9uXG4gKiAjIFNldHRpbmdzQ29udHJvbGxlclxuICovXG5hbmd1bGFyLm1vZHVsZSgnaW9uaWNQbHVnaW5QbGF5Z3JvdW5kJylcbiAgLmNvbnRyb2xsZXIoJ1ZlcnNpb25Db250cm9sbGVyJywgZnVuY3Rpb24oJHJvb3RTY29wZSwkc2NvcGUsJGNvcmRvdmFBcHBWZXJzaW9uKSB7IFxuXG5cdFx0JGNvcmRvdmFBcHBWZXJzaW9uLmdldFZlcnNpb25OdW1iZXIoKS50aGVuKGZ1bmN0aW9uICh2ZXJzaW9uKSB7XG5cdCAgICAgICAgJHNjb3BlLmFwcGxpY2F0aW9uVmVyc2lvbiA9IHZlcnNpb247XG4gICAgICBcdH0pO1x0ICBcdCBcblxuICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIElvbmljUGxheWdyb3VuZC5zZXJpdmU6RXhhbXBsZVNlcnZpY2VcbiAqIEBkZXNjcmlwdGlvblxuICogIyBFeGFtcGxlU2VydmljZVxuICovXG5hbmd1bGFyLm1vZHVsZSgnaW9uaWNQbHVnaW5QbGF5Z3JvdW5kJylcbiAgLy8gdXNlIGZhY3RvcnkgZm9yIHNlcnZpY2VzXG4gIC5mYWN0b3J5KCdBUEknLCBmdW5jdGlvbigkaHR0cCwgJHRpbWVvdXQsICRxKSB7XG5cbiAgICB2YXIga2luZE9mUHJpdmF0ZVZhcmlhYmxlID0gNDI7XG5cbiAgICB2YXIgZG9Bc3luYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICR0aW1lb3V0KGRlZmVycmVkLnJlc29sdmUuYmluZChudWxsLCBraW5kT2ZQcml2YXRlVmFyaWFibGUpLCAxMDAwKTtcbiAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH07XG5cbiAgICB2YXIgZ2V0SG9tZURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgdXJsOiAnaHR0cDovL3d3dy5qc29uLWdlbmVyYXRvci5jb20vYXBpL2pzb24vZ2V0L2JZTldkQ1ZDVU8/aW5kZW50PTInLFxuICAgICAgICAgIC8vIHBhcmFtczoge1xuICAgICAgICAgIC8vICAgICBwYXJhczogMlxuICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJ1xuICAgICAgICB9KVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnZmV0Y2hlZCB0aGlzIHN0dWZmIGZyb20gc2VydmVyOicsIGRhdGEpO1xuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdhbiBlcnJvciBvY2N1cmVkJywgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gcHVibGljIGFwaVxuICAgIHJldHVybiB7XG4gICAgICBkb0FzeW5jOiBkb0FzeW5jLFxuICAgICAgZ2V0SG9tZURhdGE6IGdldEhvbWVEYXRhXG4gICAgfTtcblxuICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgSW9uaWNQbGF5Z3JvdW5kLkFwaVNlcnZpY2VcbiAqIEBkZXNjcmlwdGlvblxuICogIyBBcGlTZXJ2aWNlXG4gKiBSZXRyaWV2ZXMgY29ycmVjdCBhcGkgdG8gbWFrZSByZXF1ZXN0cyBhZ2FpbnN0LlxuICogVXNlcyBzZXR0aW5ncyBmcm9tIEFQSV9FTkRQT0lOVCBkZWZpbmVkIGluIC9jb25maWcvYXBpRW5kcG9pbnQuanNcbiAqXG4gKiBVc2FnZSBleGFtcGxlOiAkaHR0cCh7XG4gKiAgICAgICAgICAgICAgICAgICAgICB1cmw6IEFwaVNlcnZpY2UuZ2V0RW5kUG9pbnQoKSArICcvdGhpbmdzJyxcbiAqICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCdcbiAqICAgICAgICAgICAgICAgICB9KVxuICpcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC5mYWN0b3J5KCdBcGlTZXJ2aWNlJywgZnVuY3Rpb24oJHdpbmRvdywgJGh0dHAsIEFQSV9FTkRQT0lOVCkge1xuXG4gICAgdmFyIF9hcGkgPSBBUElfRU5EUE9JTlQ7XG4gICAgdmFyIGVuZHBvaW50ID0gX2FwaS5wb3J0ID8gKF9hcGkuaG9zdCArICc6JyArIF9hcGkucG9ydCArIF9hcGkucGF0aCkgOiAoX2FwaS5ob3N0ICsgX2FwaS5wYXRoKTtcblxuICAgIC8vIGFjdGl2YXRlIGZvciBiYXNpYyBhdXRoXG4gICAgaWYgKF9hcGkubmVlZHNBdXRoKSB7XG4gICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkd2luZG93LmJ0b2EoX2FwaS51c2VybmFtZSArICc6JyArIF9hcGkucGFzc3dvcmQpO1xuICAgIH1cblxuICAgIC8vIHB1YmxpYyBhcGlcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0RW5kcG9pbnQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZW5kcG9pbnQ7IH1cbiAgICB9O1xuXG4gIH0pO1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBJb25pY1BsYXlncm91bmQuc2VyaXZlOkV4YW1wbGVTZXJ2aWNlXG4gKiBAZGVzY3JpcHRpb25cbiAqICMgRXhhbXBsZVNlcnZpY2VcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC8vIHVzZSBmYWN0b3J5IGZvciBzZXJ2aWNlc1xuICAuZmFjdG9yeSgnQXN5bmMnLCBmdW5jdGlvbigkaHR0cCwgJHRpbWVvdXQsICRxKSB7XG5cbiAgICB2YXIga2luZE9mUHJpdmF0ZVZhcmlhYmxlID0gNDI7XG5cbiAgICB2YXIgYXNrID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgJHRpbWVvdXQoZGVmZXJyZWQucmVzb2x2ZS5iaW5kKG51bGwsIGtpbmRPZlByaXZhdGVWYXJpYWJsZSksIDYwMDApO1xuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfTtcblxuICAgIC8vIHB1YmxpYyBhcGlcbiAgICByZXR1cm4ge1xuICAgICAgYXNrOiBhc2tcbiAgICB9O1xuXG4gIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgSW9uaWNQbGF5Z3JvdW5kLnNlcml2ZTpFeGFtcGxlU2VydmljZVxuICogQGRlc2NyaXB0aW9uXG4gKiAjIEV4YW1wbGVTZXJ2aWNlXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdpb25pY1BsdWdpblBsYXlncm91bmQnKVxuICAvLyB1c2UgZmFjdG9yeSBmb3Igc2VydmljZXNcbiAgLmZhY3RvcnkoJ0V4YW1wbGVTZXJ2aWNlJywgZnVuY3Rpb24oJGh0dHAsICR0aW1lb3V0LCAkcSkge1xuXG4gICAgdmFyIGtpbmRPZlByaXZhdGVWYXJpYWJsZSA9IDQyO1xuXG4gICAgdmFyIGRvU29tZXRoaW5nQXN5bmMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAkdGltZW91dChkZWZlcnJlZC5yZXNvbHZlLmJpbmQobnVsbCwga2luZE9mUHJpdmF0ZVZhcmlhYmxlKSwgMTAwMCk7XG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9O1xuXG4gICAgdmFyIGZldGNoU29tZXRoaW5nRnJvbVNlcnZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICB1cmw6ICdodHRwOi8vYmV0YS5qc29uLWdlbmVyYXRvci5jb20vYXBpL2pzb24vZ2V0L1Z5d29qN21oJyxcbiAgICAgICAgICAvLyBwYXJhbXM6IHtcbiAgICAgICAgICAvLyAgICAgcGFyYXM6IDJcbiAgICAgICAgICAvLyB9LFxuICAgICAgICAgIG1ldGhvZDogJ0dFVCdcbiAgICAgICAgfSlcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdmZXRjaGVkIHRoaXMgc3R1ZmYgZnJvbSBzZXJ2ZXI6JywgZGF0YSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5lcnJvcihmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdhbiBlcnJvciBvY2N1cmVkJywgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gcHVibGljIGFwaVxuICAgIHJldHVybiB7XG4gICAgICBkb1NvbWV0aGluZ0FzeW5jOiBkb1NvbWV0aGluZ0FzeW5jLFxuICAgICAgZmV0Y2hTb21ldGhpbmdGcm9tU2VydmVyOiBmZXRjaFNvbWV0aGluZ0Zyb21TZXJ2ZXJcbiAgICB9O1xuXG4gIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgSW9uaWNQbGF5Z3JvdW5kLnV0aWw6bG9kYXNoXG4gKiBAZGVzY3JpcHRpb25cbiAqICMgTG8tRGFzaFxuICogRXhwb3NlIExvLURhc2ggdGhyb3VnaCBpbmplY3RhYmxlIGZhY3RvcnksIHNvIHdlIGRvbid0IHBvbGx1dGUgLyByZWx5IG9uIGdsb2JhbCBuYW1lc3BhY2VcbiAqIGp1c3QgaW5qZWN0IGxvZGFzaCBhcyBfXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ2lvbmljUGx1Z2luUGxheWdyb3VuZCcpXG4gIC5mYWN0b3J5KCdfJywgZnVuY3Rpb24oJHdpbmRvdykge1xuICAgIHJldHVybiAkd2luZG93Ll87XG4gIH0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
